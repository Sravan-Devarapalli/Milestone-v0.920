CREATE PROCEDURE [dbo].[SetRecurringHoliday]
(
	@Id INT = NULL,
	@IsSet	BIT,
	@UserLogin NVARCHAR(255)
)
AS
BEGIN

DECLARE @Today DATETIME,
	@ModifiedBy INT,
	@HolidayTimeTypeId INT,
	@CurrentPMTime DATETIME,
	@PTOTimeTypeId INT

DECLARE @RecurringHolidaysDates TABLE( [Date] DATETIME, [Description] NVARCHAR(255), [Id] INT)

SELECT @Today = dbo.GettingPMTime(GETUTCDATE())
	, @HolidayTimeTypeId = dbo.GetHolidayTimeTypeId()
	, @CurrentPMTime = dbo.InsertingTime()
	, @PTOTimeTypeId = dbo.GetPTOTimeTypeId()

SELECT @ModifiedBy = PersonId
FROM Person
WHERE Alias = @UserLogin

	BEGIN TRY
	
	BEGIN TRANSACTION Tran_SetRecurringHoliday	
	
	EXEC SessionLogPrepare @UserLogin = @UserLogin

	--Set the value in CompanyRecurringHoliday
	UPDATE dbo.CompanyRecurringHoliday
	SET IsSet = @IsSet
	WHERE Id = @Id OR @Id IS NULL

	INSERT INTO @RecurringHolidaysDates([Date], [Description], [Id])
	SELECT C1.Date, crh.Description, crh.Id
	FROM dbo.Calendar AS C1
	JOIN dbo.CompanyRecurringHoliday crh ON C1.[Date] >= @Today
			AND 
			(
					(crh.[Day] IS NOT NULL --If holiday is on exact Date.
						AND (	--If Holiday comes in 
								DAY(C1.[Date]) = crh.[Day] AND MONTH(C1.[Date]) = crh.[Month] AND DATEPART(DW,C1.[Date]) NOT IN(1,7)
								OR DAY(DATEADD(DD,1,C1.[Date])) = crh.[Day] AND MONTH(DATEADD(DD,1,C1.[Date])) = crh.[Month]  AND DATEPART(DW,C1.[Date]) = 6
								OR DAY(DATEADD(DD,-1,C1.[Date])) = crh.[Day] AND MONTH(DATEADD(DD,-1,C1.[Date])) = crh.[Month] AND DATEPART(DW,C1.[Date]) = 2
							)
						)
						OR
						( crh.[Day] IS NULL AND MONTH(C1.[Date]) = crh.[Month]
						AND (
								DATEPART(DW,C1.[Date]) = crh.DayOfTheWeek
								AND (
										(crh.NumberInMonth IS NOT NULL
											AND  (C1.[Date] - DAY(C1.[Date])+1) -
														CASE WHEN (DATEPART(DW,C1.[Date]-DAY(C1.[Date])+1))%7 <= crh.DayOfTheWeek 
																THEN (DATEPART(DW,C1.[Date]-DAY(C1.[Date])+1))%7
																ELSE (DATEPART(DW,C1.[Date]-DAY(C1.[Date])+1)-7)
																END +(7*(crh.NumberInMonth-1))+crh.DayOfTheWeek = C1.[Date]
											)
											OR( crh.NumberInMonth IS NULL 
												AND (DATEADD(MM,1,C1.[Date] - DAY(C1.[Date])+1)- 1) - 
														(CASE WHEN DATEPART(DW,(DATEADD(MM,1,C1.[Date] - DAY(C1.[Date])+1)- 1)) >= crh.DayOfTheWeek
															THEN (DATEPART(DW,(DATEADD(MM,1,C1.[Date] - DAY(C1.[Date])+1)- 1)))-7
															ELSE (DATEPART(DW,(DATEADD(MM,1,C1.[Date] - DAY(C1.[Date])+1)- 1)))
															END)-(7-crh.DayOfTheWeek)= C1.[Date]
											)
										)
							)
						
						)
				 
				)	
	WHERE crh.Id = @Id OR @Id IS NULL

	--Update Calendar table.
	UPDATE  C1
	SET DayOff = @IsSet,
		IsRecurring = @IsSet,
		RecurringHolidayId = CASE WHEN @IsSet = 0 THEN null ELSE rhd.Id END,
		HolidayDescription = CASE WHEN @IsSet = 1 THEN rhd.Description
								ELSE NULL END,
		RecurringHolidayDate = NULL
	FROM dbo.Calendar AS C1
	JOIN @RecurringHolidaysDates rhd ON C1.Date = rhd.Date
	

	--Update PersonCalendarAuto table
	UPDATE C1
	SET DayOff = @IsSet
	FROM dbo.PersonCalendarAuto C1
	JOIN @RecurringHolidaysDates rhd ON C1.Date = rhd.Date
		
	
	DELETE TT
	FROM TimeTrack TT
	JOIN @RecurringHolidaysDates rhd ON rhd.Date = TT.ChargeCodeDate
	JOIN ChargeCode CC ON CC.Id = TT.ChargeCodeId AND CC.TimeTypeId IN (@PTOTimeTypeId, @HolidayTimeTypeId)
				
	IF @IsSet = 1
	BEGIN

		INSERT  INTO [dbo].[TimeTrack]
		                ( PersonId, 
							ChargeCodeId, 
							ChargeCodeDate,
							ActualHours,
							ForecastedHours,
							Note,
							IsChargeable,
							IsCorrect,
							CreateDate,
							ModifiedDate,
							ModifiedBy,
							IsAutoGenerated
		                )
		SELECT P.PersonId
				,CC.Id
				,rhd.[Date]
				,8
				,0
				,rhd.[Description]
				,0--Non billable
				,1
				,@CurrentPMTime
				,@CurrentPMTime
				,@ModifiedBy
				,1 --Here it is Auto generated.
		FROM Person P
		JOIN Pay pay ON pay.Person = P.PersonId  AND pay.Timescale = 2 AND p.PersonId = pay.Person AND P.IsStrawman = 0
		JOIN @RecurringHolidaysDates AS rhd ON rhd.Date BETWEEN pay.StartDate AND (CASE WHEN p.TerminationDate IS NOT NULL AND pay.EndDate - 1 > p.TerminationDate THEN p.TerminationDate
																															ELSE pay.EndDate - 1
																															END)
		JOIN ChargeCode CC ON CC.TimeTypeId = @HolidayTimeTypeId
		LEFT JOIN TimeTrack TT ON TT.PersonId = P.PersonId AND TT.ChargeCodeId = CC.Id AND TT.ChargeCodeDate = rhd.Date
		WHERE TT.TimeEntryId IS NULL
		
	END
	ELSE IF @IsSet = 0
	BEGIN
		INSERT INTO [dbo].[TimeTrack] 
						( PersonId, 
							ChargeCodeId, 
							ChargeCodeDate,
							ActualHours,
							ForecastedHours,
							Note,
							IsChargeable,
							IsCorrect,
							CreateDate,
							ModifiedDate,
							ModifiedBy,
							IsAutoGenerated,
							IsReviewed
		                )
		SELECT PC.PersonId,
				CC.Id,
				PC.Date,
				CASE WHEN PC.ActualHours IS NOT NULL AND ISNULL(PC.IsFloatingHoliday,0) = 0 THEN PC.ActualHours ELSE 8 END,
				0,
				CASE WHEN PC.IsFloatingHoliday = 1 THEN 'Floating Holiday' ELSE 'PTO' END,
				0,--Non billable
				1,
				@CurrentPMTime,
				@CurrentPMTime,
				@ModifiedBy,
				1,
				CASE WHEN PC.IsFromTimeEntry <> 1 AND PC.IsFloatingHoliday <> 1 THEN 1 ELSE NULL END
		FROM PersonCalendar PC
		JOIN @RecurringHolidaysDates d ON d.date = PC.Date AND PC.DayOff = 1
		JOIN Person p ON p.PersonId = PC.PersonId AND P.IsStrawman = 0
		JOIN Pay pay ON pay.Person = PC.PersonId AND pay.Timescale = 2 AND d.date BETWEEN pay.StartDate AND (CASE WHEN p.TerminationDate IS NOT NULL AND pay.EndDate - 1 > p.TerminationDate THEN p.TerminationDate
																															ELSE pay.EndDate - 1
																															END)
		JOIN ChargeCode CC ON (PC.IsFloatingHoliday = 1 AND CC.TimeTypeId = @HolidayTimeTypeId) OR (PC.IsFloatingHoliday <> 1 AND CC.TimeTypeId = @PTOTimeTypeId)
	END
	
		COMMIT TRANSACTION Tran_SetRecurringHoliday	
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION Tran_SetRecurringHoliday
		
		DECLARE	 @ERROR_STATE			tinyint
		,@ERROR_SEVERITY		tinyint
		,@ERROR_MESSAGE		    nvarchar(2000)
		,@InitialTranCount		tinyint

		SET	 @ERROR_MESSAGE		= ERROR_MESSAGE()
		SET  @ERROR_SEVERITY	= ERROR_SEVERITY()
		SET  @ERROR_STATE		= ERROR_STATE()
		RAISERROR ('%s', @ERROR_SEVERITY, @ERROR_STATE, @ERROR_MESSAGE)
	END CATCH

END

GO

