//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.ClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.logic2020.com", ConfigurationName="ClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/SaveClientDetail", ReplyAction="http://www.logic2020.com/IClientService/SaveClientDetailResponse")]
        System.Nullable<int> SaveClientDetail(DataTransferObjects.Client client, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetClientDetail", ReplyAction="http://www.logic2020.com/IClientService/GetClientDetailResponse")]
        DataTransferObjects.Client GetClientDetail(int clientId, string viewerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetClientDetailsShort", ReplyAction="http://www.logic2020.com/IClientService/GetClientDetailsShortResponse")]
        DataTransferObjects.Client GetClientDetailsShort(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/UpdateStatusForClient", ReplyAction="http://www.logic2020.com/IClientService/UpdateStatusForClientResponse")]
        void UpdateStatusForClient(int clientId, bool inActive, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/UpdateIsChargableForClient", ReplyAction="http://www.logic2020.com/IClientService/UpdateIsChargableForClientResponse")]
        void UpdateIsChargableForClient(System.Nullable<int> clientId, bool isChargable, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAll", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllResponse")]
        DataTransferObjects.Client[] ClientListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllSecure", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllSecureResponse")]
        DataTransferObjects.Client[] ClientListAllSecure(DataTransferObjects.Person person, bool inactives);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllSecureByNewRule", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllSecureByNewRuleResponse")]
        DataTransferObjects.Client[] ClientListAllSecureByNewRule(DataTransferObjects.Person person, bool inactives, bool applyNewRule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllWithInactive", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllWithInactiveResponse")]
        DataTransferObjects.Client[] ClientListAllWithInactive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllForProject", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllForProjectResponse")]
        DataTransferObjects.Client[] ClientListAllForProject(System.Nullable<int> projectId, System.Nullable<int> loggedInPersonId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetAllColorsForMargin", ReplyAction="http://www.logic2020.com/IClientService/GetAllColorsForMarginResponse")]
        DataTransferObjects.ColorInformation[] GetAllColorsForMargin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetClientMarginColorInfo", ReplyAction="http://www.logic2020.com/IClientService/GetClientMarginColorInfoResponse")]
        DataTransferObjects.ClientMarginColorInfo[] GetClientMarginColorInfo(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllWithoutPermissions", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllWithoutPermissionsResponse")]
        DataTransferObjects.Client[] ClientListAllWithoutPermissions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetInternalAccount", ReplyAction="http://www.logic2020.com/IClientService/GetInternalAccountResponse")]
        DataTransferObjects.Client GetInternalAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientIsNoteRequiredUpdate", ReplyAction="http://www.logic2020.com/IClientService/ClientIsNoteRequiredUpdateResponse")]
        void ClientIsNoteRequiredUpdate(int clientId, bool isNoteRequired, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/PricingListInsert", ReplyAction="http://www.logic2020.com/IClientService/PricingListInsertResponse")]
        int PricingListInsert(DataTransferObjects.PricingList pricingList, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/PricingListDelete", ReplyAction="http://www.logic2020.com/IClientService/PricingListDeleteResponse")]
        void PricingListDelete(int pricingListId, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/PricingListUpdate", ReplyAction="http://www.logic2020.com/IClientService/PricingListUpdateResponse")]
        void PricingListUpdate(DataTransferObjects.PricingList pricingList, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetPricingLists", ReplyAction="http://www.logic2020.com/IClientService/GetPricingListsResponse")]
        DataTransferObjects.PricingList[] GetPricingLists(System.Nullable<int> clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : PraticeManagement.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<PraticeManagement.ClientService.IClientService>, PraticeManagement.ClientService.IClientService {
        
       
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Nullable<int> SaveClientDetail(DataTransferObjects.Client client, string userLogin) {
            return base.Channel.SaveClientDetail(client, userLogin);
        }
        
        public DataTransferObjects.Client GetClientDetail(int clientId, string viewerUsername) {
            return base.Channel.GetClientDetail(clientId, viewerUsername);
        }
        
        public DataTransferObjects.Client GetClientDetailsShort(int clientId) {
            return base.Channel.GetClientDetailsShort(clientId);
        }
        
        public void UpdateStatusForClient(int clientId, bool inActive, string userLogin) {
            base.Channel.UpdateStatusForClient(clientId, inActive, userLogin);
        }
        
        public void UpdateIsChargableForClient(System.Nullable<int> clientId, bool isChargable, string userLogin) {
            base.Channel.UpdateIsChargableForClient(clientId, isChargable, userLogin);
        }
        
        public DataTransferObjects.Client[] ClientListAll() {
            return base.Channel.ClientListAll();
        }
        
        public DataTransferObjects.Client[] ClientListAllSecure(DataTransferObjects.Person person, bool inactives) {
            return base.Channel.ClientListAllSecure(person, inactives);
        }
        
        public DataTransferObjects.Client[] ClientListAllSecureByNewRule(DataTransferObjects.Person person, bool inactives, bool applyNewRule) {
            return base.Channel.ClientListAllSecureByNewRule(person, inactives, applyNewRule);
        }
        
        public DataTransferObjects.Client[] ClientListAllWithInactive() {
            return base.Channel.ClientListAllWithInactive();
        }
        
        public DataTransferObjects.Client[] ClientListAllForProject(System.Nullable<int> projectId, System.Nullable<int> loggedInPersonId) {
            return base.Channel.ClientListAllForProject(projectId, loggedInPersonId);
        }
        
        public DataTransferObjects.ColorInformation[] GetAllColorsForMargin() {
            return base.Channel.GetAllColorsForMargin();
        }
        
        public DataTransferObjects.ClientMarginColorInfo[] GetClientMarginColorInfo(int clientId) {
            return base.Channel.GetClientMarginColorInfo(clientId);
        }
        
        public DataTransferObjects.Client[] ClientListAllWithoutPermissions() {
            return base.Channel.ClientListAllWithoutPermissions();
        }
        
        public DataTransferObjects.Client GetInternalAccount() {
            return base.Channel.GetInternalAccount();
        }
        
        public void ClientIsNoteRequiredUpdate(int clientId, bool isNoteRequired, string userLogin) {
            base.Channel.ClientIsNoteRequiredUpdate(clientId, isNoteRequired, userLogin);
        }
        
        public int PricingListInsert(DataTransferObjects.PricingList pricingList, string userLogin) {
            return base.Channel.PricingListInsert(pricingList, userLogin);
        }
        
        public void PricingListDelete(int pricingListId, string userLogin) {
            base.Channel.PricingListDelete(pricingListId, userLogin);
        }
        
        public void PricingListUpdate(DataTransferObjects.PricingList pricingList, string userLogin) {
            base.Channel.PricingListUpdate(pricingList, userLogin);
        }
        
        public DataTransferObjects.PricingList[] GetPricingLists(System.Nullable<int> clientId) {
            return base.Channel.GetPricingLists(clientId);
        }
    }
}

