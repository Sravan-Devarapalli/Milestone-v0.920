//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.ClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.logic2020.com", ConfigurationName="ClientService.IClientService")]
    public interface IClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/SaveClientDetail", ReplyAction="http://www.logic2020.com/IClientService/SaveClientDetailResponse")]
        System.Nullable<int> SaveClientDetail(DataTransferObjects.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/GetClientDetail", ReplyAction="http://www.logic2020.com/IClientService/GetClientDetailResponse")]
        DataTransferObjects.Client GetClientDetail(int clientId, string viewerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientInactivate", ReplyAction="http://www.logic2020.com/IClientService/ClientInactivateResponse")]
        void ClientInactivate(DataTransferObjects.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientReactivate", ReplyAction="http://www.logic2020.com/IClientService/ClientReactivateResponse")]
        void ClientReactivate(DataTransferObjects.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/UpdateIsChargableForClient", ReplyAction="http://www.logic2020.com/IClientService/UpdateIsChargableForClientResponse")]
        void UpdateIsChargableForClient(System.Nullable<int> clientId, bool isChargable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAll", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllResponse")]
        DataTransferObjects.Client[] ClientListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllSecure", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllSecureResponse")]
        DataTransferObjects.Client[] ClientListAllSecure(DataTransferObjects.Person person, bool inactives);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllWithInactive", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllWithInactiveResponse")]
        DataTransferObjects.Client[] ClientListAllWithInactive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IClientService/ClientListAllForProject", ReplyAction="http://www.logic2020.com/IClientService/ClientListAllForProjectResponse")]
        DataTransferObjects.Client[] ClientListAllForProject(System.Nullable<int> projectId, System.Nullable<int> loggedInPersonId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : PraticeManagement.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<PraticeManagement.ClientService.IClientService>, PraticeManagement.ClientService.IClientService {
      
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Nullable<int> SaveClientDetail(DataTransferObjects.Client client) {
            return base.Channel.SaveClientDetail(client);
        }
        
        public DataTransferObjects.Client GetClientDetail(int clientId, string viewerUsername) {
            return base.Channel.GetClientDetail(clientId, viewerUsername);
        }
        
        public void ClientInactivate(DataTransferObjects.Client client) {
            base.Channel.ClientInactivate(client);
        }
        
        public void ClientReactivate(DataTransferObjects.Client client) {
            base.Channel.ClientReactivate(client);
        }
        
        public void UpdateIsChargableForClient(System.Nullable<int> clientId, bool isChargable) {
            base.Channel.UpdateIsChargableForClient(clientId, isChargable);
        }
        
        public DataTransferObjects.Client[] ClientListAll() {
            return base.Channel.ClientListAll();
        }
        
        public DataTransferObjects.Client[] ClientListAllSecure(DataTransferObjects.Person person, bool inactives) {
            return base.Channel.ClientListAllSecure(person, inactives);
        }
        
        public DataTransferObjects.Client[] ClientListAllWithInactive() {
            return base.Channel.ClientListAllWithInactive();
        }
        
        public DataTransferObjects.Client[] ClientListAllForProject(System.Nullable<int> projectId, System.Nullable<int> loggedInPersonId) {
            return base.Channel.ClientListAllForProject(projectId, loggedInPersonId);
        }
    }
}

