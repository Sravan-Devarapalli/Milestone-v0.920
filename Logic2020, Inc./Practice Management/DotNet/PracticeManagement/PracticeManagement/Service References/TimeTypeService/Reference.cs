//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.TimeTypeService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TimeTypeService.ITimeTypeService")]
    public interface ITimeTypeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/GetAllTimeTypes", ReplyAction="http://tempuri.org/ITimeTypeService/GetAllTimeTypesResponse")]
        DataTransferObjects.TimeEntry.TimeTypeRecord[] GetAllTimeTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/GetAllAdministrativeTimeTypes", ReplyAction="http://tempuri.org/ITimeTypeService/GetAllAdministrativeTimeTypesResponse")]
        DataTransferObjects.TimeEntry.TimeTypeRecord[] GetAllAdministrativeTimeTypes(bool includePTO, bool includeHoliday);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/GetAdministrativeChargeCodeValues", ReplyAction="http://tempuri.org/ITimeTypeService/GetAdministrativeChargeCodeValuesResponse")]
        DataTransferObjects.Triple<int, int, int> GetAdministrativeChargeCodeValues(int timeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/RemoveTimeType", ReplyAction="http://tempuri.org/ITimeTypeService/RemoveTimeTypeResponse")]
        void RemoveTimeType(int timeTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/UpdateTimeType", ReplyAction="http://tempuri.org/ITimeTypeService/UpdateTimeTypeResponse")]
        void UpdateTimeType(DataTransferObjects.TimeEntry.TimeTypeRecord timeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/AddTimeType", ReplyAction="http://tempuri.org/ITimeTypeService/AddTimeTypeResponse")]
        int AddTimeType(DataTransferObjects.TimeEntry.TimeTypeRecord timeType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimeTypeService/GetWorkTypeNameById", ReplyAction="http://tempuri.org/ITimeTypeService/GetWorkTypeNameByIdResponse")]
        string GetWorkTypeNameById(int worktypeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimeTypeServiceChannel : PraticeManagement.TimeTypeService.ITimeTypeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeTypeServiceClient : System.ServiceModel.ClientBase<PraticeManagement.TimeTypeService.ITimeTypeService>, PraticeManagement.TimeTypeService.ITimeTypeService {
        
        public TimeTypeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimeTypeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeTypeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimeTypeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataTransferObjects.TimeEntry.TimeTypeRecord[] GetAllTimeTypes() {
            return base.Channel.GetAllTimeTypes();
        }
        
        public DataTransferObjects.TimeEntry.TimeTypeRecord[] GetAllAdministrativeTimeTypes(bool includePTO, bool includeHoliday) {
            return base.Channel.GetAllAdministrativeTimeTypes(includePTO, includeHoliday);
        }
        
        public DataTransferObjects.Triple<int, int, int> GetAdministrativeChargeCodeValues(int timeTypeId) {
            return base.Channel.GetAdministrativeChargeCodeValues(timeTypeId);
        }
        
        public void RemoveTimeType(int timeTypeId) {
            base.Channel.RemoveTimeType(timeTypeId);
        }
        
        public void UpdateTimeType(DataTransferObjects.TimeEntry.TimeTypeRecord timeType) {
            base.Channel.UpdateTimeType(timeType);
        }
        
        public int AddTimeType(DataTransferObjects.TimeEntry.TimeTypeRecord timeType) {
            return base.Channel.AddTimeType(timeType);
        }
        
        public string GetWorkTypeNameById(int worktypeId) {
            return base.Channel.GetWorkTypeNameById(worktypeId);
        }
    }
}

