//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.PersonService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonService.IPersonService")]
    public interface IPersonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/DeleteStrawman", ReplyAction="http://tempuri.org/IPersonService/DeleteStrawmanResponse")]
        void DeleteStrawman(int personId, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmanDetailsById", ReplyAction="http://tempuri.org/IPersonService/GetStrawmanDetailsByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetStrawmanDetailsById(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmenListAll", ReplyAction="http://tempuri.org/IPersonService/GetStrawmenListAllResponse")]
        DataTransferObjects.Person[] GetStrawmenListAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmenListAllShort", ReplyAction="http://tempuri.org/IPersonService/GetStrawmenListAllShortResponse")]
        DataTransferObjects.Person[] GetStrawmenListAllShort(bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveStrawManFromExisting", ReplyAction="http://tempuri.org/IPersonService/SaveStrawManFromExistingResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        int SaveStrawManFromExisting(int existingPersonId, DataTransferObjects.Person person, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantswithDemand", ReplyAction="http://tempuri.org/IPersonService/GetConsultantswithDemandResponse")]
        DataTransferObjects.ConsultantDemandItem[] GetConsultantswithDemand(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsPersonHaveActiveStatusDuringThisPeriod", ReplyAction="http://tempuri.org/IPersonService/IsPersonHaveActiveStatusDuringThisPeriodRespons" +
            "e")]
        bool IsPersonHaveActiveStatusDuringThisPeriod(int personId, System.DateTime startDate, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonsListHavingActiveStatusDuringThisPeriod", ReplyAction="http://tempuri.org/IPersonService/PersonsListHavingActiveStatusDuringThisPeriodRe" +
            "sponse")]
        DataTransferObjects.Person[] PersonsListHavingActiveStatusDuringThisPeriod(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetApprovedByManagerList", ReplyAction="http://tempuri.org/IPersonService/GetApprovedByManagerListResponse")]
        DataTransferObjects.Person[] GetApprovedByManagerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListBySearchKeyword", ReplyAction="http://tempuri.org/IPersonService/GetPersonListBySearchKeywordResponse")]
        DataTransferObjects.Person[] GetPersonListBySearchKeyword(string looked);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetAllPayTypes", ReplyAction="http://tempuri.org/IPersonService/GetAllPayTypesResponse")]
        DataTransferObjects.Timescale[] GetAllPayTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPayHistoryShortByPerson", ReplyAction="http://tempuri.org/IPersonService/GetPayHistoryShortByPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPayHistoryShortByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsPersonSalaryTypeListByPeriod", ReplyAction="http://tempuri.org/IPersonService/IsPersonSalaryTypeListByPeriodResponse")]
        System.Collections.Generic.Dictionary<System.DateTime, bool> IsPersonSalaryTypeListByPeriod(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDetailsShort", ReplyAction="http://tempuri.org/IPersonService/GetPersonDetailsShortResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonDetailsShort(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmanDetailsByIdWithCurrentPay", ReplyAction="http://tempuri.org/IPersonService/GetStrawmanDetailsByIdWithCurrentPayResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetStrawmanDetailsByIdWithCurrentPay(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetHistoryByPerson", ReplyAction="http://tempuri.org/IPersonService/GetHistoryByPersonResponse")]
        DataTransferObjects.Pay[] GetHistoryByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetStrawmanListShortFilterWithTodayPay", ReplyAction="http://tempuri.org/IPersonService/GetStrawmanListShortFilterWithTodayPayResponse")]
        DataTransferObjects.Person[] GetStrawmanListShortFilterWithTodayPay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonInactivate", ReplyAction="http://tempuri.org/IPersonService/PersonInactivateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void PersonInactivate(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonReactivate", ReplyAction="http://tempuri.org/IPersonService/PersonReactivateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void PersonReactivate(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonOverheadByPerson", ReplyAction="http://tempuri.org/IPersonService/GetPersonOverheadByPersonResponse")]
        DataTransferObjects.PersonOverhead[] GetPersonOverheadByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonOverheadByTimescale", ReplyAction="http://tempuri.org/IPersonService/GetPersonOverheadByTimescaleResponse")]
        DataTransferObjects.PersonOverhead[] GetPersonOverheadByTimescale(DataTransferObjects.TimescaleType timescale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonRate", ReplyAction="http://tempuri.org/IPersonService/GetPersonRateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.MilestonePerson GetPersonRate(DataTransferObjects.MilestonePerson milestonePerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancials", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsResponse")]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancials(int personId, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancialsPerson", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPerson(DataTransferObjects.Person person, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonTargetMargin", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonTargetMarginRe" +
            "sponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPersonTargetMargin(DataTransferObjects.Person person, decimal targetMargin, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPayment", ReplyAction="http://tempuri.org/IPersonService/GetPaymentResponse")]
        DataTransferObjects.Pay GetPayment(int personId, System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePay", ReplyAction="http://tempuri.org/IPersonService/SavePayResponse")]
        void SavePay(DataTransferObjects.Pay pay, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/DeletePay", ReplyAction="http://tempuri.org/IPersonService/DeletePayResponse")]
        void DeletePay(int personId, System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ListSeniorities", ReplyAction="http://tempuri.org/IPersonService/ListSenioritiesResponse")]
        DataTransferObjects.Seniority[] ListSeniorities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetPermissionsForPerson", ReplyAction="http://tempuri.org/IPersonService/SetPermissionsForPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetPermissionsForPerson(DataTransferObjects.Person person, DataTransferObjects.PersonPermission permissions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonById", ReplyAction="http://tempuri.org/IPersonService/GetPersonByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonById(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ListManagersSubordinates", ReplyAction="http://tempuri.org/IPersonService/ListManagersSubordinatesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] ListManagersSubordinates(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByStatusList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByStatusListResponse")]
        DataTransferObjects.Person[] GetPersonListByStatusList(string statusList, System.Nullable<int> personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByPersonIdList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByPersonIdListResponse")]
        DataTransferObjects.Person[] GetPersonListByPersonIdList(string PersonIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByPersonIdsAndPayTypeIds", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByPersonIdsAndPayTypeIdsResponse")]
        DataTransferObjects.Person[] GetPersonListByPersonIdsAndPayTypeIds(string personIds, string paytypeIds, string practiceIds, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveUserTemporaryCredentials", ReplyAction="http://tempuri.org/IPersonService/SaveUserTemporaryCredentialsResponse")]
        bool SaveUserTemporaryCredentials(string userName, string PMLoginPageUrl, string PMChangePasswordPageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfTemporaryCredentialsValid", ReplyAction="http://tempuri.org/IPersonService/CheckIfTemporaryCredentialsValidResponse")]
        bool CheckIfTemporaryCredentialsValid(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetNewPasswordForUser", ReplyAction="http://tempuri.org/IPersonService/SetNewPasswordForUserResponse")]
        void SetNewPasswordForUser(string userName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListByCategoryTypeAndPeriod", ReplyAction="http://tempuri.org/IPersonService/PersonListByCategoryTypeAndPeriodResponse")]
        DataTransferObjects.Person[] PersonListByCategoryTypeAndPeriod(DataTransferObjects.BudgetCategoryType categoryType, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckPersonTimeEntriesAfterTerminationDate", ReplyAction="http://tempuri.org/IPersonService/CheckPersonTimeEntriesAfterTerminationDateRespo" +
            "nse")]
        bool CheckPersonTimeEntriesAfterTerminationDate(int personId, System.DateTime terminationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonMilestonesAfterTerminationDate", ReplyAction="http://tempuri.org/IPersonService/GetPersonMilestonesAfterTerminationDateResponse" +
            "")]
        DataTransferObjects.Milestone[] GetPersonMilestonesAfterTerminationDate(int personId, System.DateTime terminationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPasswordHistoryByUserName", ReplyAction="http://tempuri.org/IPersonService/GetPasswordHistoryByUserNameResponse")]
        DataTransferObjects.UserPasswordsHistory[] GetPasswordHistoryByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetEncodedPassword", ReplyAction="http://tempuri.org/IPersonService/GetEncodedPasswordResponse")]
        string GetEncodedPassword(string password, string passwordSalt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/RestartCustomMembershipProvider", ReplyAction="http://tempuri.org/IPersonService/RestartCustomMembershipProviderResponse")]
        void RestartCustomMembershipProvider();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SendLockedOutNotificationEmail", ReplyAction="http://tempuri.org/IPersonService/SendLockedOutNotificationEmailResponse")]
        void SendLockedOutNotificationEmail(string userName, string loginPageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetIsNoteRequiredDetailsForSelectedDateRange", ReplyAction="http://tempuri.org/IPersonService/GetIsNoteRequiredDetailsForSelectedDateRangeRes" +
            "ponse")]
        System.Collections.Generic.Dictionary<System.DateTime, bool> GetIsNoteRequiredDetailsForSelectedDateRange(System.DateTime start, System.DateTime end, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetOwnerProjectsAfterTerminationDate", ReplyAction="http://tempuri.org/IPersonService/GetOwnerProjectsAfterTerminationDateResponse")]
        DataTransferObjects.Project[] GetOwnerProjectsAfterTerminationDate(int personId, System.DateTime terminationDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetActiveOpportunitiesByOwnerId", ReplyAction="http://tempuri.org/IPersonService/GetActiveOpportunitiesByOwnerIdResponse")]
        DataTransferObjects.Opportunity[] GetActiveOpportunitiesByOwnerId(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveStrawman", ReplyAction="http://tempuri.org/IPersonService/SaveStrawmanResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        System.Nullable<int> SaveStrawman(DataTransferObjects.Person person, DataTransferObjects.Pay currentPay, string userLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonMilestoneWithFinancials", ReplyAction="http://tempuri.org/IPersonService/GetPersonMilestoneWithFinancialsResponse")]
        System.Data.DataSet GetPersonMilestoneWithFinancials(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetAsDefaultManager", ReplyAction="http://tempuri.org/IPersonService/SetAsDefaultManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetAsDefaultManager(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsSomeonesManager", ReplyAction="http://tempuri.org/IPersonService/IsSomeonesManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        bool IsSomeonesManager(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetNewManager", ReplyAction="http://tempuri.org/IPersonService/SetNewManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetNewManager(DataTransferObjects.Person oldManager, DataTransferObjects.Person newManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantUtilizationReport", ReplyAction="http://tempuri.org/IPersonService/GetConsultantUtilizationReportResponse")]
        System.Data.DataSet GetConsultantUtilizationReport(DataTransferObjects.ContextObjects.ConsultantTableReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantUtilizationWeekly", ReplyAction="http://tempuri.org/IPersonService/GetConsultantUtilizationWeeklyResponse")]
        DataTransferObjects.Quadruple<DataTransferObjects.Person, int[], int, int>[] GetConsultantUtilizationWeekly(DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ConsultantUtilizationDailyByPerson", ReplyAction="http://tempuri.org/IPersonService/ConsultantUtilizationDailyByPersonResponse")]
        DataTransferObjects.Triple<DataTransferObjects.Person, int[], int>[] ConsultantUtilizationDailyByPerson(int personId, DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsCompensationCoversMilestone", ReplyAction="http://tempuri.org/IPersonService/IsCompensationCoversMilestoneResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        bool IsCompensationCoversMilestone(DataTransferObjects.Person person, System.Nullable<System.DateTime> start, System.Nullable<System.DateTime> end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CurrentPayExists", ReplyAction="http://tempuri.org/IPersonService/CurrentPayExistsResponse")]
        bool CurrentPayExists(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonGetExcelSet", ReplyAction="http://tempuri.org/IPersonService/PersonGetExcelSetResponse")]
        System.Data.DataSet PersonGetExcelSet();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPermissions", ReplyAction="http://tempuri.org/IPersonService/GetPermissionsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.PersonPermission GetPermissions(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListResponse")]
        DataTransferObjects.Person[] GetPersonList(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListWithCurrentPay", ReplyAction="http://tempuri.org/IPersonService/GetPersonListWithCurrentPayResponse")]
        DataTransferObjects.Person[] GetPersonListWithCurrentPay(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName, string sortBy, System.Nullable<int> timeScaleId, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListWithCurrentPayByCommaSeparatedIdsL" +
            "ist", ReplyAction="http://tempuri.org/IPersonService/GetPersonListWithCurrentPayByCommaSeparatedIdsL" +
            "istResponse")]
        DataTransferObjects.Person[] GetPersonListWithCurrentPayByCommaSeparatedIdsList(string practiceIdsSelected, bool active, int pageSize, int pageNo, string looked, string recruiterIdsSelected, string userName, string sortBy, string timeScaleIdsSelected, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListActiveDate", ReplyAction="http://tempuri.org/IPersonService/GetPersonListActiveDateResponse")]
        DataTransferObjects.Person[] GetPersonListActiveDate(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> recruiterId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListAllShort", ReplyAction="http://tempuri.org/IPersonService/PersonListAllShortResponse")]
        DataTransferObjects.Person[] PersonListAllShort(System.Nullable<int> practice, System.Nullable<int> statusId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/OwnerListAllShort", ReplyAction="http://tempuri.org/IPersonService/OwnerListAllShortResponse")]
        DataTransferObjects.Person[] OwnerListAllShort(System.Nullable<int> statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonsGetBySeniorityAndStatus", ReplyAction="http://tempuri.org/IPersonService/PersonsGetBySeniorityAndStatusResponse")]
        DataTransferObjects.Person[] PersonsGetBySeniorityAndStatus(int seniorityId, System.Nullable<int> statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListShortByRoleAndStatus", ReplyAction="http://tempuri.org/IPersonService/PersonListShortByRoleAndStatusResponse")]
        DataTransferObjects.Person[] PersonListShortByRoleAndStatus(System.Nullable<int> statusId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListAllForMilestone", ReplyAction="http://tempuri.org/IPersonService/PersonListAllForMilestoneResponse")]
        DataTransferObjects.Person[] PersonListAllForMilestone(System.Nullable<int> milestonePersonId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonCount", ReplyAction="http://tempuri.org/IPersonService/GetPersonCountResponse")]
        int GetPersonCount(System.Nullable<int> practice, bool showAll, string looked, System.Nullable<int> recruiterId, string userName, System.Nullable<int> timeScaleId, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonCountByCommaSeperatedIdsList", ReplyAction="http://tempuri.org/IPersonService/GetPersonCountByCommaSeperatedIdsListResponse")]
        int GetPersonCountByCommaSeperatedIdsList(string practiceIds, bool active, string looked, string recruiterIds, string userName, string timeScaleIds, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonWorkDaysNumber", ReplyAction="http://tempuri.org/IPersonService/GetPersonWorkDaysNumberResponse")]
        int GetPersonWorkDaysNumber(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetRecruiterList", ReplyAction="http://tempuri.org/IPersonService/GetRecruiterListResponse")]
        DataTransferObjects.Person[] GetRecruiterList(System.Nullable<int> personId, System.Nullable<System.DateTime> hireDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetSalespersonList", ReplyAction="http://tempuri.org/IPersonService/GetSalespersonListResponse")]
        DataTransferObjects.Person[] GetSalespersonList(bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListSalesperson", ReplyAction="http://tempuri.org/IPersonService/PersonListSalespersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListSalesperson(DataTransferObjects.Person person, bool inactives);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListProjectOwner", ReplyAction="http://tempuri.org/IPersonService/PersonListProjectOwnerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListProjectOwner(bool includeInactive, DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetCareerCounselorHierarchiPersons", ReplyAction="http://tempuri.org/IPersonService/GetCareerCounselorHierarchiPersonsResponse")]
        DataTransferObjects.Person[] GetCareerCounselorHierarchiPersons(int managerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetOneOffList", ReplyAction="http://tempuri.org/IPersonService/GetOneOffListResponse")]
        DataTransferObjects.Person[] GetOneOffList(System.DateTime today, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDetail", ReplyAction="http://tempuri.org/IPersonService/GetPersonDetailResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonDetail(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonByAlias", ReplyAction="http://tempuri.org/IPersonService/GetPersonByAliasResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonByAlias(string alias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePersonDetail", ReplyAction="http://tempuri.org/IPersonService/SavePersonDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DataTransferObjects.DataAccessFault), Action="http://tempuri.org/IPersonService/SavePersonDetailDataAccessFaultFault", Name="DataAccessFault", Namespace="http://schemas.datacontract.org/2004/07/DataTransferObjects")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        int SavePersonDetail(DataTransferObjects.Person person, string currentUser, string loginPageUrl);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonServiceChannel : PraticeManagement.PersonService.IPersonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonServiceClient : System.ServiceModel.ClientBase<PraticeManagement.PersonService.IPersonService>, PraticeManagement.PersonService.IPersonService {
      
        
        public PersonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DeleteStrawman(int personId, string userLogin) {
            base.Channel.DeleteStrawman(personId, userLogin);
        }
        
        public DataTransferObjects.Person GetStrawmanDetailsById(int personId) {
            return base.Channel.GetStrawmanDetailsById(personId);
        }
        
        public DataTransferObjects.Person[] GetStrawmenListAll() {
            return base.Channel.GetStrawmenListAll();
        }
        
        public DataTransferObjects.Person[] GetStrawmenListAllShort(bool includeInactive) {
            return base.Channel.GetStrawmenListAllShort(includeInactive);
        }
        
        public int SaveStrawManFromExisting(int existingPersonId, DataTransferObjects.Person person, string userLogin) {
            return base.Channel.SaveStrawManFromExisting(existingPersonId, person, userLogin);
        }
        
        public DataTransferObjects.ConsultantDemandItem[] GetConsultantswithDemand(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetConsultantswithDemand(startDate, endDate);
        }
        
        public bool IsPersonHaveActiveStatusDuringThisPeriod(int personId, System.DateTime startDate, System.Nullable<System.DateTime> endDate) {
            return base.Channel.IsPersonHaveActiveStatusDuringThisPeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] PersonsListHavingActiveStatusDuringThisPeriod(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonsListHavingActiveStatusDuringThisPeriod(startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetApprovedByManagerList() {
            return base.Channel.GetApprovedByManagerList();
        }
        
        public DataTransferObjects.Person[] GetPersonListBySearchKeyword(string looked) {
            return base.Channel.GetPersonListBySearchKeyword(looked);
        }
        
        public DataTransferObjects.Timescale[] GetAllPayTypes() {
            return base.Channel.GetAllPayTypes();
        }
        
        public DataTransferObjects.Person GetPayHistoryShortByPerson(int personId) {
            return base.Channel.GetPayHistoryShortByPerson(personId);
        }
        
        public System.Collections.Generic.Dictionary<System.DateTime, bool> IsPersonSalaryTypeListByPeriod(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.IsPersonSalaryTypeListByPeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person GetPersonDetailsShort(int personId) {
            return base.Channel.GetPersonDetailsShort(personId);
        }
        
        public DataTransferObjects.Person GetStrawmanDetailsByIdWithCurrentPay(int id) {
            return base.Channel.GetStrawmanDetailsByIdWithCurrentPay(id);
        }
        
        public DataTransferObjects.Pay[] GetHistoryByPerson(int personId) {
            return base.Channel.GetHistoryByPerson(personId);
        }
        
        public DataTransferObjects.Person[] GetStrawmanListShortFilterWithTodayPay() {
            return base.Channel.GetStrawmanListShortFilterWithTodayPay();
        }
        
        public void PersonInactivate(DataTransferObjects.Person person) {
            base.Channel.PersonInactivate(person);
        }
        
        public void PersonReactivate(DataTransferObjects.Person person) {
            base.Channel.PersonReactivate(person);
        }
        
        public DataTransferObjects.PersonOverhead[] GetPersonOverheadByPerson(int personId) {
            return base.Channel.GetPersonOverheadByPerson(personId);
        }
        
        public DataTransferObjects.PersonOverhead[] GetPersonOverheadByTimescale(DataTransferObjects.TimescaleType timescale) {
            return base.Channel.GetPersonOverheadByTimescale(timescale);
        }
        
        public DataTransferObjects.MilestonePerson GetPersonRate(DataTransferObjects.MilestonePerson milestonePerson) {
            return base.Channel.GetPersonRate(milestonePerson);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancials(int personId, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount) {
            return base.Channel.CalculateProposedFinancials(personId, proposedRate, proposedHoursPerWeek, clientDiscount);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPerson(DataTransferObjects.Person person, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage) {
            return base.Channel.CalculateProposedFinancialsPerson(person, proposedRate, proposedHoursPerWeek, clientDiscount, isMarginTestPage);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPersonTargetMargin(DataTransferObjects.Person person, decimal targetMargin, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage) {
            return base.Channel.CalculateProposedFinancialsPersonTargetMargin(person, targetMargin, proposedHoursPerWeek, clientDiscount, isMarginTestPage);
        }
        
        public DataTransferObjects.Pay GetPayment(int personId, System.DateTime startDate) {
            return base.Channel.GetPayment(personId, startDate);
        }
        
        public void SavePay(DataTransferObjects.Pay pay, string user) {
            base.Channel.SavePay(pay, user);
        }
        
        public void DeletePay(int personId, System.DateTime startDate) {
            base.Channel.DeletePay(personId, startDate);
        }
        
        public DataTransferObjects.Seniority[] ListSeniorities() {
            return base.Channel.ListSeniorities();
        }
        
        public void SetPermissionsForPerson(DataTransferObjects.Person person, DataTransferObjects.PersonPermission permissions) {
            base.Channel.SetPermissionsForPerson(person, permissions);
        }
        
        public DataTransferObjects.Person GetPersonById(int personId) {
            return base.Channel.GetPersonById(personId);
        }
        
        public DataTransferObjects.Person[] ListManagersSubordinates(DataTransferObjects.Person person) {
            return base.Channel.ListManagersSubordinates(person);
        }
        
        public DataTransferObjects.Person[] GetPersonListByStatusList(string statusList, System.Nullable<int> personId) {
            return base.Channel.GetPersonListByStatusList(statusList, personId);
        }
        
        public DataTransferObjects.Person[] GetPersonListByPersonIdList(string PersonIds) {
            return base.Channel.GetPersonListByPersonIdList(PersonIds);
        }
        
        public DataTransferObjects.Person[] GetPersonListByPersonIdsAndPayTypeIds(string personIds, string paytypeIds, string practiceIds, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonListByPersonIdsAndPayTypeIds(personIds, paytypeIds, practiceIds, startDate, endDate);
        }
        
        public bool SaveUserTemporaryCredentials(string userName, string PMLoginPageUrl, string PMChangePasswordPageUrl) {
            return base.Channel.SaveUserTemporaryCredentials(userName, PMLoginPageUrl, PMChangePasswordPageUrl);
        }
        
        public bool CheckIfTemporaryCredentialsValid(string userName, string password) {
            return base.Channel.CheckIfTemporaryCredentialsValid(userName, password);
        }
        
        public void SetNewPasswordForUser(string userName, string newPassword) {
            base.Channel.SetNewPasswordForUser(userName, newPassword);
        }
        
        public DataTransferObjects.Person[] PersonListByCategoryTypeAndPeriod(DataTransferObjects.BudgetCategoryType categoryType, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListByCategoryTypeAndPeriod(categoryType, startDate, endDate);
        }
        
        public bool CheckPersonTimeEntriesAfterTerminationDate(int personId, System.DateTime terminationDate) {
            return base.Channel.CheckPersonTimeEntriesAfterTerminationDate(personId, terminationDate);
        }
        
        public DataTransferObjects.Milestone[] GetPersonMilestonesAfterTerminationDate(int personId, System.DateTime terminationDate) {
            return base.Channel.GetPersonMilestonesAfterTerminationDate(personId, terminationDate);
        }
        
        public DataTransferObjects.UserPasswordsHistory[] GetPasswordHistoryByUserName(string userName) {
            return base.Channel.GetPasswordHistoryByUserName(userName);
        }
        
        public string GetEncodedPassword(string password, string passwordSalt) {
            return base.Channel.GetEncodedPassword(password, passwordSalt);
        }
        
        public void RestartCustomMembershipProvider() {
            base.Channel.RestartCustomMembershipProvider();
        }
        
        public void SendLockedOutNotificationEmail(string userName, string loginPageUrl) {
            base.Channel.SendLockedOutNotificationEmail(userName, loginPageUrl);
        }
        
        public System.Collections.Generic.Dictionary<System.DateTime, bool> GetIsNoteRequiredDetailsForSelectedDateRange(System.DateTime start, System.DateTime end, int personId) {
            return base.Channel.GetIsNoteRequiredDetailsForSelectedDateRange(start, end, personId);
        }
        
        public DataTransferObjects.Project[] GetOwnerProjectsAfterTerminationDate(int personId, System.DateTime terminationDate) {
            return base.Channel.GetOwnerProjectsAfterTerminationDate(personId, terminationDate);
        }
        
        public DataTransferObjects.Opportunity[] GetActiveOpportunitiesByOwnerId(int personId) {
            return base.Channel.GetActiveOpportunitiesByOwnerId(personId);
        }
        
        public System.Nullable<int> SaveStrawman(DataTransferObjects.Person person, DataTransferObjects.Pay currentPay, string userLogin) {
            return base.Channel.SaveStrawman(person, currentPay, userLogin);
        }
        
        public System.Data.DataSet GetPersonMilestoneWithFinancials(int personId) {
            return base.Channel.GetPersonMilestoneWithFinancials(personId);
        }
        
        public void SetAsDefaultManager(DataTransferObjects.Person person) {
            base.Channel.SetAsDefaultManager(person);
        }
        
        public bool IsSomeonesManager(DataTransferObjects.Person person) {
            return base.Channel.IsSomeonesManager(person);
        }
        
        public void SetNewManager(DataTransferObjects.Person oldManager, DataTransferObjects.Person newManager) {
            base.Channel.SetNewManager(oldManager, newManager);
        }
        
        public System.Data.DataSet GetConsultantUtilizationReport(DataTransferObjects.ContextObjects.ConsultantTableReportContext context) {
            return base.Channel.GetConsultantUtilizationReport(context);
        }
        
        public DataTransferObjects.Quadruple<DataTransferObjects.Person, int[], int, int>[] GetConsultantUtilizationWeekly(DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context) {
            return base.Channel.GetConsultantUtilizationWeekly(context);
        }
        
        public DataTransferObjects.Triple<DataTransferObjects.Person, int[], int>[] ConsultantUtilizationDailyByPerson(int personId, DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context) {
            return base.Channel.ConsultantUtilizationDailyByPerson(personId, context);
        }
        
        public bool IsCompensationCoversMilestone(DataTransferObjects.Person person, System.Nullable<System.DateTime> start, System.Nullable<System.DateTime> end) {
            return base.Channel.IsCompensationCoversMilestone(person, start, end);
        }
        
        public bool CurrentPayExists(int personId) {
            return base.Channel.CurrentPayExists(personId);
        }
        
        public System.Data.DataSet PersonGetExcelSet() {
            return base.Channel.PersonGetExcelSet();
        }
        
        public DataTransferObjects.PersonPermission GetPermissions(DataTransferObjects.Person person) {
            return base.Channel.GetPermissions(person);
        }
        
        public DataTransferObjects.Person[] GetPersonList(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName) {
            return base.Channel.GetPersonList(practice, active, pageSize, pageNo, looked, recruiterId, userName);
        }
        
        public DataTransferObjects.Person[] GetPersonListWithCurrentPay(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName, string sortBy, System.Nullable<int> timeScaleId, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet) {
            return base.Channel.GetPersonListWithCurrentPay(practice, active, pageSize, pageNo, looked, recruiterId, userName, sortBy, timeScaleId, projected, terminated, inactive, alphabet);
        }
        
        public DataTransferObjects.Person[] GetPersonListWithCurrentPayByCommaSeparatedIdsList(string practiceIdsSelected, bool active, int pageSize, int pageNo, string looked, string recruiterIdsSelected, string userName, string sortBy, string timeScaleIdsSelected, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet) {
            return base.Channel.GetPersonListWithCurrentPayByCommaSeparatedIdsList(practiceIdsSelected, active, pageSize, pageNo, looked, recruiterIdsSelected, userName, sortBy, timeScaleIdsSelected, projected, terminated, inactive, alphabet);
        }
        
        public DataTransferObjects.Person[] GetPersonListActiveDate(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> recruiterId, string userName) {
            return base.Channel.GetPersonListActiveDate(practice, active, pageSize, pageNo, looked, startDate, endDate, recruiterId, userName);
        }
        
        public DataTransferObjects.Person[] PersonListAllShort(System.Nullable<int> practice, System.Nullable<int> statusId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListAllShort(practice, statusId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] OwnerListAllShort(System.Nullable<int> statusId) {
            return base.Channel.OwnerListAllShort(statusId);
        }
        
        public DataTransferObjects.Person[] PersonsGetBySeniorityAndStatus(int seniorityId, System.Nullable<int> statusId) {
            return base.Channel.PersonsGetBySeniorityAndStatus(seniorityId, statusId);
        }
        
        public DataTransferObjects.Person[] PersonListShortByRoleAndStatus(System.Nullable<int> statusId, string roleName) {
            return base.Channel.PersonListShortByRoleAndStatus(statusId, roleName);
        }
        
        public DataTransferObjects.Person[] PersonListAllForMilestone(System.Nullable<int> milestonePersonId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListAllForMilestone(milestonePersonId, startDate, endDate);
        }
        
        public int GetPersonCount(System.Nullable<int> practice, bool showAll, string looked, System.Nullable<int> recruiterId, string userName, System.Nullable<int> timeScaleId, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet) {
            return base.Channel.GetPersonCount(practice, showAll, looked, recruiterId, userName, timeScaleId, projected, terminated, inactive, alphabet);
        }
        
        public int GetPersonCountByCommaSeperatedIdsList(string practiceIds, bool active, string looked, string recruiterIds, string userName, string timeScaleIds, bool projected, bool terminated, bool inactive, System.Nullable<char> alphabet) {
            return base.Channel.GetPersonCountByCommaSeperatedIdsList(practiceIds, active, looked, recruiterIds, userName, timeScaleIds, projected, terminated, inactive, alphabet);
        }
        
        public int GetPersonWorkDaysNumber(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonWorkDaysNumber(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetRecruiterList(System.Nullable<int> personId, System.Nullable<System.DateTime> hireDate) {
            return base.Channel.GetRecruiterList(personId, hireDate);
        }
        
        public DataTransferObjects.Person[] GetSalespersonList(bool includeInactive) {
            return base.Channel.GetSalespersonList(includeInactive);
        }
        
        public DataTransferObjects.Person[] PersonListSalesperson(DataTransferObjects.Person person, bool inactives) {
            return base.Channel.PersonListSalesperson(person, inactives);
        }
        
        public DataTransferObjects.Person[] PersonListProjectOwner(bool includeInactive, DataTransferObjects.Person person) {
            return base.Channel.PersonListProjectOwner(includeInactive, person);
        }
        
        public DataTransferObjects.Person[] GetCareerCounselorHierarchiPersons(int managerId) {
            return base.Channel.GetCareerCounselorHierarchiPersons(managerId);
        }
        
        public DataTransferObjects.Person[] GetOneOffList(System.DateTime today, string userName) {
            return base.Channel.GetOneOffList(today, userName);
        }
        
        public DataTransferObjects.Person GetPersonDetail(int personId) {
            return base.Channel.GetPersonDetail(personId);
        }
        
        public DataTransferObjects.Person GetPersonByAlias(string alias) {
            return base.Channel.GetPersonByAlias(alias);
        }
        
        public int SavePersonDetail(DataTransferObjects.Person person, string currentUser, string loginPageUrl) {
            return base.Channel.SavePersonDetail(person, currentUser, loginPageUrl);
        }
    }
}

