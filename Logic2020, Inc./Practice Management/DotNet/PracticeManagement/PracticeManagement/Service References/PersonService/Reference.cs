//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.PersonService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PersonService.IPersonService")]
    public interface IPersonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonReactivate", ReplyAction="http://tempuri.org/IPersonService/PersonReactivateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void PersonReactivate(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonOverheadByPerson", ReplyAction="http://tempuri.org/IPersonService/GetPersonOverheadByPersonResponse")]
        DataTransferObjects.PersonOverhead[] GetPersonOverheadByPerson(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonOverheadByTimescale", ReplyAction="http://tempuri.org/IPersonService/GetPersonOverheadByTimescaleResponse")]
        DataTransferObjects.PersonOverhead[] GetPersonOverheadByTimescale(DataTransferObjects.TimescaleType timescale);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonRate", ReplyAction="http://tempuri.org/IPersonService/GetPersonRateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.MilestonePerson GetPersonRate(DataTransferObjects.MilestonePerson milestonePerson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancials", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsResponse")]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancials(int personId, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancialsPerson", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPerson(DataTransferObjects.Person person, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonTargetMargin", ReplyAction="http://tempuri.org/IPersonService/CalculateProposedFinancialsPersonTargetMarginRe" +
            "sponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPersonTargetMargin(DataTransferObjects.Person person, decimal targetMargin, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPayment", ReplyAction="http://tempuri.org/IPersonService/GetPaymentResponse")]
        DataTransferObjects.Pay GetPayment(int personId, System.DateTime startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePay", ReplyAction="http://tempuri.org/IPersonService/SavePayResponse")]
        void SavePay(DataTransferObjects.Pay pay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ListSeniorities", ReplyAction="http://tempuri.org/IPersonService/ListSenioritiesResponse")]
        DataTransferObjects.Seniority[] ListSeniorities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetPermissionsForPerson", ReplyAction="http://tempuri.org/IPersonService/SetPermissionsForPersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetPermissionsForPerson(DataTransferObjects.Person person, DataTransferObjects.PersonPermission permissions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonById", ReplyAction="http://tempuri.org/IPersonService/GetPersonByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonById(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ListManagersSubordinates", ReplyAction="http://tempuri.org/IPersonService/ListManagersSubordinatesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] ListManagersSubordinates(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByStatusList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByStatusListResponse")]
        DataTransferObjects.Person[] GetPersonListByStatusList(string statusList, System.Nullable<int> personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListByPersonIdList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListByPersonIdListResponse")]
        DataTransferObjects.Person[] GetPersonListByPersonIdList(string PersonIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SaveUserTemporaryCredentials", ReplyAction="http://tempuri.org/IPersonService/SaveUserTemporaryCredentialsResponse")]
        bool SaveUserTemporaryCredentials(string userName, string PMLoginPageUrl, string PMChangePasswordPageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CheckIfTemporaryCredentialsValid", ReplyAction="http://tempuri.org/IPersonService/CheckIfTemporaryCredentialsValidResponse")]
        bool CheckIfTemporaryCredentialsValid(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetNewPasswordForUser", ReplyAction="http://tempuri.org/IPersonService/SetNewPasswordForUserResponse")]
        void SetNewPasswordForUser(string userName, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListByCategoryTypeAndPeriod", ReplyAction="http://tempuri.org/IPersonService/PersonListByCategoryTypeAndPeriodResponse")]
        DataTransferObjects.Person[] PersonListByCategoryTypeAndPeriod(DataTransferObjects.BudgetCategoryType categoryType, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonMilestoneWithFinancials", ReplyAction="http://tempuri.org/IPersonService/GetPersonMilestoneWithFinancialsResponse")]
        System.Data.DataSet GetPersonMilestoneWithFinancials(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetAsDefaultManager", ReplyAction="http://tempuri.org/IPersonService/SetAsDefaultManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetAsDefaultManager(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsSomeonesManager", ReplyAction="http://tempuri.org/IPersonService/IsSomeonesManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        bool IsSomeonesManager(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SetNewManager", ReplyAction="http://tempuri.org/IPersonService/SetNewManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void SetNewManager(DataTransferObjects.Person oldManager, DataTransferObjects.Person newManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantUtilizationReport", ReplyAction="http://tempuri.org/IPersonService/GetConsultantUtilizationReportResponse")]
        System.Data.DataSet GetConsultantUtilizationReport(DataTransferObjects.ContextObjects.ConsultantTableReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetConsultantUtilizationWeekly", ReplyAction="http://tempuri.org/IPersonService/GetConsultantUtilizationWeeklyResponse")]
        DataTransferObjects.Triple<DataTransferObjects.Person, int[], int>[] GetConsultantUtilizationWeekly(DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/ConsultantUtilizationDailyByPerson", ReplyAction="http://tempuri.org/IPersonService/ConsultantUtilizationDailyByPersonResponse")]
        DataTransferObjects.Triple<DataTransferObjects.Person, int[], int>[] ConsultantUtilizationDailyByPerson(int personId, DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/IsCompensationCoversMilestone", ReplyAction="http://tempuri.org/IPersonService/IsCompensationCoversMilestoneResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        bool IsCompensationCoversMilestone(DataTransferObjects.Person person, System.Nullable<System.DateTime> start, System.Nullable<System.DateTime> end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/CurrentPayExists", ReplyAction="http://tempuri.org/IPersonService/CurrentPayExistsResponse")]
        bool CurrentPayExists(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonGetExcelSet", ReplyAction="http://tempuri.org/IPersonService/PersonGetExcelSetResponse")]
        System.Data.DataSet PersonGetExcelSet();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPermissions", ReplyAction="http://tempuri.org/IPersonService/GetPermissionsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.PersonPermission GetPermissions(DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonList", ReplyAction="http://tempuri.org/IPersonService/GetPersonListResponse")]
        DataTransferObjects.Person[] GetPersonList(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListWithCurrentPay", ReplyAction="http://tempuri.org/IPersonService/GetPersonListWithCurrentPayResponse")]
        DataTransferObjects.Person[] GetPersonListWithCurrentPay(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName, string sortBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonListActiveDate", ReplyAction="http://tempuri.org/IPersonService/GetPersonListActiveDateResponse")]
        DataTransferObjects.Person[] GetPersonListActiveDate(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> recruiterId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListAllShort", ReplyAction="http://tempuri.org/IPersonService/PersonListAllShortResponse")]
        DataTransferObjects.Person[] PersonListAllShort(System.Nullable<int> practice, System.Nullable<int> statusId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonsGetBySeniorityAndStatus", ReplyAction="http://tempuri.org/IPersonService/PersonsGetBySeniorityAndStatusResponse")]
        DataTransferObjects.Person[] PersonsGetBySeniorityAndStatus(int seniorityId, System.Nullable<int> statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListShortByRoleAndStatus", ReplyAction="http://tempuri.org/IPersonService/PersonListShortByRoleAndStatusResponse")]
        DataTransferObjects.Person[] PersonListShortByRoleAndStatus(System.Nullable<int> statusId, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListAllForMilestone", ReplyAction="http://tempuri.org/IPersonService/PersonListAllForMilestoneResponse")]
        DataTransferObjects.Person[] PersonListAllForMilestone(System.Nullable<int> milestonePersonId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonCount", ReplyAction="http://tempuri.org/IPersonService/GetPersonCountResponse")]
        int GetPersonCount(System.Nullable<int> practice, bool showAll, string looked, System.Nullable<int> recruiterId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonWorkDaysNumber", ReplyAction="http://tempuri.org/IPersonService/GetPersonWorkDaysNumberResponse")]
        int GetPersonWorkDaysNumber(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetRecruiterList", ReplyAction="http://tempuri.org/IPersonService/GetRecruiterListResponse")]
        DataTransferObjects.Person[] GetRecruiterList(System.Nullable<int> personId, System.Nullable<System.DateTime> hireDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetSalespersonList", ReplyAction="http://tempuri.org/IPersonService/GetSalespersonListResponse")]
        DataTransferObjects.Person[] GetSalespersonList(bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListSalesperson", ReplyAction="http://tempuri.org/IPersonService/PersonListSalespersonResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListSalesperson(DataTransferObjects.Person person, bool inactives);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPracticeManagerList", ReplyAction="http://tempuri.org/IPersonService/GetPracticeManagerListResponse")]
        DataTransferObjects.Person[] GetPracticeManagerList(System.Nullable<int> projectId, System.Nullable<System.DateTime> endDate, bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListProjectOwner", ReplyAction="http://tempuri.org/IPersonService/PersonListProjectOwnerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListProjectOwner(System.Nullable<System.DateTime> endDate, bool includeInactive, DataTransferObjects.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonListPracticeManager", ReplyAction="http://tempuri.org/IPersonService/PersonListPracticeManagerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person[] PersonListPracticeManager(DataTransferObjects.Person person, System.Nullable<int> projectId, System.Nullable<System.DateTime> endDate, bool includeInactive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetSubordinates", ReplyAction="http://tempuri.org/IPersonService/GetSubordinatesResponse")]
        DataTransferObjects.Person[] GetSubordinates(int practiceManagerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetOneOffList", ReplyAction="http://tempuri.org/IPersonService/GetOneOffListResponse")]
        DataTransferObjects.Person[] GetOneOffList(System.DateTime today, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonDetail", ReplyAction="http://tempuri.org/IPersonService/GetPersonDetailResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonDetail(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/GetPersonByAlias", ReplyAction="http://tempuri.org/IPersonService/GetPersonByAliasResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        DataTransferObjects.Person GetPersonByAlias(string alias);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/SavePersonDetail", ReplyAction="http://tempuri.org/IPersonService/SavePersonDetailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DataTransferObjects.DataAccessFault), Action="http://tempuri.org/IPersonService/SavePersonDetailDataAccessFaultFault", Name="DataAccessFault", Namespace="http://schemas.datacontract.org/2004/07/DataTransferObjects")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        int SavePersonDetail(DataTransferObjects.Person person, string currentUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPersonService/PersonInactivate", ReplyAction="http://tempuri.org/IPersonService/PersonInactivateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataTransferObjects.ComputedFinancialsEx))]
        void PersonInactivate(DataTransferObjects.Person person);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersonServiceChannel : PraticeManagement.PersonService.IPersonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonServiceClient : System.ServiceModel.ClientBase<PraticeManagement.PersonService.IPersonService>, PraticeManagement.PersonService.IPersonService {
        
        public PersonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void PersonReactivate(DataTransferObjects.Person person) {
            base.Channel.PersonReactivate(person);
        }
        
        public DataTransferObjects.PersonOverhead[] GetPersonOverheadByPerson(int personId) {
            return base.Channel.GetPersonOverheadByPerson(personId);
        }
        
        public DataTransferObjects.PersonOverhead[] GetPersonOverheadByTimescale(DataTransferObjects.TimescaleType timescale) {
            return base.Channel.GetPersonOverheadByTimescale(timescale);
        }
        
        public DataTransferObjects.MilestonePerson GetPersonRate(DataTransferObjects.MilestonePerson milestonePerson) {
            return base.Channel.GetPersonRate(milestonePerson);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancials(int personId, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount) {
            return base.Channel.CalculateProposedFinancials(personId, proposedRate, proposedHoursPerWeek, clientDiscount);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPerson(DataTransferObjects.Person person, decimal proposedRate, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage) {
            return base.Channel.CalculateProposedFinancialsPerson(person, proposedRate, proposedHoursPerWeek, clientDiscount, isMarginTestPage);
        }
        
        public DataTransferObjects.ComputedFinancialsEx CalculateProposedFinancialsPersonTargetMargin(DataTransferObjects.Person person, decimal targetMargin, decimal proposedHoursPerWeek, decimal clientDiscount, bool isMarginTestPage) {
            return base.Channel.CalculateProposedFinancialsPersonTargetMargin(person, targetMargin, proposedHoursPerWeek, clientDiscount, isMarginTestPage);
        }
        
        public DataTransferObjects.Pay GetPayment(int personId, System.DateTime startDate) {
            return base.Channel.GetPayment(personId, startDate);
        }
        
        public void SavePay(DataTransferObjects.Pay pay) {
            base.Channel.SavePay(pay);
        }
        
        public DataTransferObjects.Seniority[] ListSeniorities() {
            return base.Channel.ListSeniorities();
        }
        
        public void SetPermissionsForPerson(DataTransferObjects.Person person, DataTransferObjects.PersonPermission permissions) {
            base.Channel.SetPermissionsForPerson(person, permissions);
        }
        
        public DataTransferObjects.Person GetPersonById(int personId) {
            return base.Channel.GetPersonById(personId);
        }
        
        public DataTransferObjects.Person[] ListManagersSubordinates(DataTransferObjects.Person person) {
            return base.Channel.ListManagersSubordinates(person);
        }
        
        public DataTransferObjects.Person[] GetPersonListByStatusList(string statusList, System.Nullable<int> personId) {
            return base.Channel.GetPersonListByStatusList(statusList, personId);
        }
        
        public DataTransferObjects.Person[] GetPersonListByPersonIdList(string PersonIds) {
            return base.Channel.GetPersonListByPersonIdList(PersonIds);
        }
        
        public bool SaveUserTemporaryCredentials(string userName, string PMLoginPageUrl, string PMChangePasswordPageUrl) {
            return base.Channel.SaveUserTemporaryCredentials(userName, PMLoginPageUrl, PMChangePasswordPageUrl);
        }
        
        public bool CheckIfTemporaryCredentialsValid(string userName, string password) {
            return base.Channel.CheckIfTemporaryCredentialsValid(userName, password);
        }
        
        public void SetNewPasswordForUser(string userName, string newPassword) {
            base.Channel.SetNewPasswordForUser(userName, newPassword);
        }
        
        public DataTransferObjects.Person[] PersonListByCategoryTypeAndPeriod(DataTransferObjects.BudgetCategoryType categoryType, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListByCategoryTypeAndPeriod(categoryType, startDate, endDate);
        }
        
        public System.Data.DataSet GetPersonMilestoneWithFinancials(int personId) {
            return base.Channel.GetPersonMilestoneWithFinancials(personId);
        }
        
        public void SetAsDefaultManager(DataTransferObjects.Person person) {
            base.Channel.SetAsDefaultManager(person);
        }
        
        public bool IsSomeonesManager(DataTransferObjects.Person person) {
            return base.Channel.IsSomeonesManager(person);
        }
        
        public void SetNewManager(DataTransferObjects.Person oldManager, DataTransferObjects.Person newManager) {
            base.Channel.SetNewManager(oldManager, newManager);
        }
        
        public System.Data.DataSet GetConsultantUtilizationReport(DataTransferObjects.ContextObjects.ConsultantTableReportContext context) {
            return base.Channel.GetConsultantUtilizationReport(context);
        }
        
        public DataTransferObjects.Triple<DataTransferObjects.Person, int[], int>[] GetConsultantUtilizationWeekly(DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context) {
            return base.Channel.GetConsultantUtilizationWeekly(context);
        }
        
        public DataTransferObjects.Triple<DataTransferObjects.Person, int[], int>[] ConsultantUtilizationDailyByPerson(int personId, DataTransferObjects.ContextObjects.ConsultantTimelineReportContext context) {
            return base.Channel.ConsultantUtilizationDailyByPerson(personId, context);
        }
        
        public bool IsCompensationCoversMilestone(DataTransferObjects.Person person, System.Nullable<System.DateTime> start, System.Nullable<System.DateTime> end) {
            return base.Channel.IsCompensationCoversMilestone(person, start, end);
        }
        
        public bool CurrentPayExists(int personId) {
            return base.Channel.CurrentPayExists(personId);
        }
        
        public System.Data.DataSet PersonGetExcelSet() {
            return base.Channel.PersonGetExcelSet();
        }
        
        public DataTransferObjects.PersonPermission GetPermissions(DataTransferObjects.Person person) {
            return base.Channel.GetPermissions(person);
        }
        
        public DataTransferObjects.Person[] GetPersonList(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName) {
            return base.Channel.GetPersonList(practice, active, pageSize, pageNo, looked, recruiterId, userName);
        }
        
        public DataTransferObjects.Person[] GetPersonListWithCurrentPay(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.Nullable<int> recruiterId, string userName, string sortBy) {
            return base.Channel.GetPersonListWithCurrentPay(practice, active, pageSize, pageNo, looked, recruiterId, userName, sortBy);
        }
        
        public DataTransferObjects.Person[] GetPersonListActiveDate(System.Nullable<int> practice, bool active, int pageSize, int pageNo, string looked, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> recruiterId, string userName) {
            return base.Channel.GetPersonListActiveDate(practice, active, pageSize, pageNo, looked, startDate, endDate, recruiterId, userName);
        }
        
        public DataTransferObjects.Person[] PersonListAllShort(System.Nullable<int> practice, System.Nullable<int> statusId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListAllShort(practice, statusId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] PersonsGetBySeniorityAndStatus(int seniorityId, System.Nullable<int> statusId) {
            return base.Channel.PersonsGetBySeniorityAndStatus(seniorityId, statusId);
        }
        
        public DataTransferObjects.Person[] PersonListShortByRoleAndStatus(System.Nullable<int> statusId, string roleName) {
            return base.Channel.PersonListShortByRoleAndStatus(statusId, roleName);
        }
        
        public DataTransferObjects.Person[] PersonListAllForMilestone(System.Nullable<int> milestonePersonId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonListAllForMilestone(milestonePersonId, startDate, endDate);
        }
        
        public int GetPersonCount(System.Nullable<int> practice, bool showAll, string looked, System.Nullable<int> recruiterId, string userName) {
            return base.Channel.GetPersonCount(practice, showAll, looked, recruiterId, userName);
        }
        
        public int GetPersonWorkDaysNumber(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonWorkDaysNumber(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] GetRecruiterList(System.Nullable<int> personId, System.Nullable<System.DateTime> hireDate) {
            return base.Channel.GetRecruiterList(personId, hireDate);
        }
        
        public DataTransferObjects.Person[] GetSalespersonList(bool includeInactive) {
            return base.Channel.GetSalespersonList(includeInactive);
        }
        
        public DataTransferObjects.Person[] PersonListSalesperson(DataTransferObjects.Person person, bool inactives) {
            return base.Channel.PersonListSalesperson(person, inactives);
        }
        
        public DataTransferObjects.Person[] GetPracticeManagerList(System.Nullable<int> projectId, System.Nullable<System.DateTime> endDate, bool includeInactive) {
            return base.Channel.GetPracticeManagerList(projectId, endDate, includeInactive);
        }
        
        public DataTransferObjects.Person[] PersonListProjectOwner(System.Nullable<System.DateTime> endDate, bool includeInactive, DataTransferObjects.Person person) {
            return base.Channel.PersonListProjectOwner(endDate, includeInactive, person);
        }
        
        public DataTransferObjects.Person[] PersonListPracticeManager(DataTransferObjects.Person person, System.Nullable<int> projectId, System.Nullable<System.DateTime> endDate, bool includeInactive) {
            return base.Channel.PersonListPracticeManager(person, projectId, endDate, includeInactive);
        }
        
        public DataTransferObjects.Person[] GetSubordinates(int practiceManagerId) {
            return base.Channel.GetSubordinates(practiceManagerId);
        }
        
        public DataTransferObjects.Person[] GetOneOffList(System.DateTime today, string userName) {
            return base.Channel.GetOneOffList(today, userName);
        }
        
        public DataTransferObjects.Person GetPersonDetail(int personId) {
            return base.Channel.GetPersonDetail(personId);
        }
        
        public DataTransferObjects.Person GetPersonByAlias(string alias) {
            return base.Channel.GetPersonByAlias(alias);
        }
        
        public int SavePersonDetail(DataTransferObjects.Person person, string currentUser) {
            return base.Channel.SavePersonDetail(person, currentUser);
        }
        
        public void PersonInactivate(DataTransferObjects.Person person) {
            base.Channel.PersonInactivate(person);
        }
    }
}

