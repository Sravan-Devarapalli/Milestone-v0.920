//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.ProjectGroupService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.logic2020.com", ConfigurationName="ProjectGroupService.IProjectGroupService")]
    public interface IProjectGroupService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IProjectGroupService/GroupListAll", ReplyAction="http://www.logic2020.com/IProjectGroupService/GroupListAllResponse")]
        DataTransferObjects.ProjectGroup[] GroupListAll(System.Nullable<int> clientId, System.Nullable<int> projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IProjectGroupService/UpDateProductGroup", ReplyAction="http://www.logic2020.com/IProjectGroupService/UpDateProductGroupResponse")]
        bool UpDateProductGroup(int clientId, int groupId, string groupName, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IProjectGroupService/ProjectGroupInsert", ReplyAction="http://www.logic2020.com/IProjectGroupService/ProjectGroupInsertResponse")]
        int ProjectGroupInsert(int clientId, string groupName, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IProjectGroupService/ProjectGroupDelete", ReplyAction="http://www.logic2020.com/IProjectGroupService/ProjectGroupDeleteResponse")]
        bool ProjectGroupDelete(int groupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.logic2020.com/IProjectGroupService/GetInternalBusinessUnits", ReplyAction="http://www.logic2020.com/IProjectGroupService/GetInternalBusinessUnitsResponse")]
        DataTransferObjects.ProjectGroup[] GetInternalBusinessUnits();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectGroupServiceChannel : PraticeManagement.ProjectGroupService.IProjectGroupService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectGroupServiceClient : System.ServiceModel.ClientBase<PraticeManagement.ProjectGroupService.IProjectGroupService>, PraticeManagement.ProjectGroupService.IProjectGroupService {
        
    
        public ProjectGroupServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectGroupServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectGroupServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectGroupServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataTransferObjects.ProjectGroup[] GroupListAll(System.Nullable<int> clientId, System.Nullable<int> projectId) {
            return base.Channel.GroupListAll(clientId, projectId);
        }
        
        public bool UpDateProductGroup(int clientId, int groupId, string groupName, bool isActive) {
            return base.Channel.UpDateProductGroup(clientId, groupId, groupName, isActive);
        }
        
        public int ProjectGroupInsert(int clientId, string groupName, bool isActive) {
            return base.Channel.ProjectGroupInsert(clientId, groupName, isActive);
        }
        
        public bool ProjectGroupDelete(int groupId) {
            return base.Channel.ProjectGroupDelete(groupId);
        }
        
        public DataTransferObjects.ProjectGroup[] GetInternalBusinessUnits() {
            return base.Channel.GetInternalBusinessUnits();
        }
    }
}

