//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PraticeManagement.ReportService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReportService.IReportService")]
    public interface IReportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ResourceAssignedOrUnassignedChargingExceptionRe" +
            "port", ReplyAction="http://tempuri.org/IReportService/ResourceAssignedOrUnassignedChargingExceptionRe" +
            "portResponse")]
        DataTransferObjects.Reports.ResourceExceptionReport[] ResourceAssignedOrUnassignedChargingExceptionReport(System.DateTime startDate, System.DateTime endDate, bool isUnassignedReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/RecruitingMetricsReport", ReplyAction="http://tempuri.org/IReportService/RecruitingMetricsReportResponse")]
        DataTransferObjects.Person[] RecruitingMetricsReport(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ProjectFeedbackReport", ReplyAction="http://tempuri.org/IReportService/ProjectFeedbackReportResponse")]
        DataTransferObjects.ProjectFeedback[] ProjectFeedbackReport(
                    string accountIds, 
                    string businessGroupIds, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    string projectStatus, 
                    string projectIds, 
                    string directorIds, 
                    string practiceIds, 
                    bool excludeInternalPractices, 
                    string personIds, 
                    string titleIds, 
                    string reviewStartdateMonths, 
                    string reviewEnddateMonths, 
                    string projectmanagerIds, 
                    string statusIds, 
                    bool isExport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/BillingReportByCurrency", ReplyAction="http://tempuri.org/IReportService/BillingReportByCurrencyResponse")]
        DataTransferObjects.Reports.BillingReport[] BillingReportByCurrency(System.DateTime startDate, System.DateTime endDate, string practiceIds, string accountIds, string businessUnitIds, string directorIds, string salesPersonIds, string projectManagerIds, string seniorManagerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/BillingReportByHours", ReplyAction="http://tempuri.org/IReportService/BillingReportByHoursResponse")]
        DataTransferObjects.Reports.BillingReport[] BillingReportByHours(System.DateTime startDate, System.DateTime endDate, string practiceIds, string accountIds, string businessUnitIds, string directorIds, string salesPersonIds, string projectManagerIds, string seniorManagerIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/NonBillableReport", ReplyAction="http://tempuri.org/IReportService/NonBillableReportResponse")]
        DataTransferObjects.Reports.ProjectLevelGroupedHours[] NonBillableReport(System.DateTime startDate, System.DateTime endDate, string projectNumber, string directorIds, string businessUnitIds, string practiceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/PersonTimeEntriesDetails", ReplyAction="http://tempuri.org/IReportService/PersonTimeEntriesDetailsResponse")]
        DataTransferObjects.Reports.TimeEntriesGroupByClientAndProject[] PersonTimeEntriesDetails(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/PersonTimeEntriesSummary", ReplyAction="http://tempuri.org/IReportService/PersonTimeEntriesSummaryResponse")]
        DataTransferObjects.Reports.TimeEntriesGroupByClientAndProject[] PersonTimeEntriesSummary(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetPersonTimeEntriesTotalsByPeriod", ReplyAction="http://tempuri.org/IReportService/GetPersonTimeEntriesTotalsByPeriodResponse")]
        DataTransferObjects.Reports.PersonTimeEntriesTotals GetPersonTimeEntriesTotalsByPeriod(int personId, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TimePeriodSummaryReportByResource", ReplyAction="http://tempuri.org/IReportService/TimePeriodSummaryReportByResourceResponse")]
        DataTransferObjects.Reports.PersonLevelGroupedHours[] TimePeriodSummaryReportByResource(System.DateTime startDate, System.DateTime endDate, bool includePersonsWithNoTimeEntries, string personIds, string titleIds, string timescaleNames, string personStatusIds, string personDivisionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TimePeriodSummaryReportByProject", ReplyAction="http://tempuri.org/IReportService/TimePeriodSummaryReportByProjectResponse")]
        DataTransferObjects.Reports.ProjectLevelGroupedHours[] TimePeriodSummaryReportByProject(System.DateTime startDate, System.DateTime endDate, string clientIds, string personStatusIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TimePeriodSummaryReportByWorkType", ReplyAction="http://tempuri.org/IReportService/TimePeriodSummaryReportByWorkTypeResponse")]
        DataTransferObjects.Reports.WorkTypeLevelGroupedHours[] TimePeriodSummaryReportByWorkType(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ProjectSummaryReportByResource", ReplyAction="http://tempuri.org/IReportService/ProjectSummaryReportByResourceResponse")]
        DataTransferObjects.Reports.PersonLevelGroupedHours[] ProjectSummaryReportByResource(string projectNumber, System.Nullable<int> mileStoneId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string personRoleNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ProjectDetailReportByResource", ReplyAction="http://tempuri.org/IReportService/ProjectDetailReportByResourceResponse")]
        DataTransferObjects.Reports.PersonLevelGroupedHours[] ProjectDetailReportByResource(string projectNumber, System.Nullable<int> mileStoneId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string personRoleNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ProjectSummaryReportByWorkType", ReplyAction="http://tempuri.org/IReportService/ProjectSummaryReportByWorkTypeResponse")]
        DataTransferObjects.Reports.WorkTypeLevelGroupedHours[] ProjectSummaryReportByWorkType(string projectNumber, System.Nullable<int> mileStoneId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string categoryNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetProjectsByClientId", ReplyAction="http://tempuri.org/IReportService/GetProjectsByClientIdResponse")]
        DataTransferObjects.Project[] GetProjectsByClientId(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ProjectSearchByName", ReplyAction="http://tempuri.org/IReportService/ProjectSearchByNameResponse")]
        DataTransferObjects.Project[] ProjectSearchByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetMilestonesForProject", ReplyAction="http://tempuri.org/IReportService/GetMilestonesForProjectResponse")]
        DataTransferObjects.Milestone[] GetMilestonesForProject(string projectNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TimePeriodSummaryByResourcePayCheck", ReplyAction="http://tempuri.org/IReportService/TimePeriodSummaryByResourcePayCheckResponse")]
        DataTransferObjects.Reports.PersonLevelPayCheck[] TimePeriodSummaryByResourcePayCheck(System.DateTime startDate, System.DateTime endDate, bool includePersonsWithNoTimeEntries, string personIds, string titleIds, string timescaleNames, string personStatusIds, string personDivisionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TimeEntryAuditReportByPerson", ReplyAction="http://tempuri.org/IReportService/TimeEntryAuditReportByPersonResponse")]
        DataTransferObjects.Reports.PersonLevelTimeEntriesHistory[] TimeEntryAuditReportByPerson(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TimeEntryAuditReportByProject", ReplyAction="http://tempuri.org/IReportService/TimeEntryAuditReportByProjectResponse")]
        DataTransferObjects.Reports.ProjectLevelTimeEntriesHistory[] TimeEntryAuditReportByProject(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AccountSummaryReportByBusinessUnit", ReplyAction="http://tempuri.org/IReportService/AccountSummaryReportByBusinessUnitResponse")]
        DataTransferObjects.Reports.ByAccount.GroupByAccount AccountSummaryReportByBusinessUnit(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AccountSummaryReportByProject", ReplyAction="http://tempuri.org/IReportService/AccountSummaryReportByProjectResponse")]
        DataTransferObjects.Reports.ByAccount.GroupByAccount AccountSummaryReportByProject(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate, string projectStatusIds, string projectBillingTypes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AccountReportGroupByBusinessUnit", ReplyAction="http://tempuri.org/IReportService/AccountReportGroupByBusinessUnitResponse")]
        DataTransferObjects.Reports.ByAccount.BusinessUnitLevelGroupedHours[] AccountReportGroupByBusinessUnit(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AccountReportGroupByPerson", ReplyAction="http://tempuri.org/IReportService/AccountReportGroupByPersonResponse")]
        DataTransferObjects.Reports.ByAccount.GroupByPerson[] AccountReportGroupByPerson(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/NewHireReport", ReplyAction="http://tempuri.org/IReportService/NewHireReportResponse")]
        DataTransferObjects.Person[] NewHireReport(System.DateTime startDate, System.DateTime endDate, string personStatusIds, string payTypeIds, string practiceIds, bool excludeInternalPractices, string personDivisionIds, string titleIds, string hireDates, string recruiterIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TerminationReport", ReplyAction="http://tempuri.org/IReportService/TerminationReportResponse")]
        DataTransferObjects.Reports.HumanCapital.TerminationPersonsInRange TerminationReport(System.DateTime startDate, System.DateTime endDate, string payTypeIds, string personStatusIds, string titleIds, string terminationReasonIds, string practiceIds, bool excludeInternalPractices, string personDivisionIds, string recruiterIds, string hireDates, string terminationDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/TerminationReportGraph", ReplyAction="http://tempuri.org/IReportService/TerminationReportGraphResponse")]
        DataTransferObjects.Reports.HumanCapital.TerminationPersonsInRange[] TerminationReportGraph(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandSummary", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandSummaryResponse")]
        DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbyTitleSkill[] ConsultingDemandSummary(System.DateTime startDate, System.DateTime endDate, string titles, string skills);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandDetailsByTitleSkill", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandDetailsByTitleSkillResponse")]
        DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbyTitleSkill[] ConsultingDemandDetailsByTitleSkill(System.DateTime startDate, System.DateTime endDate, string titles, string skills, string sortColumns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandDetailsBySalesStage", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandDetailsBySalesStageResponse")]
        DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupBySalesStage[] ConsultingDemandDetailsBySalesStage(System.DateTime startDate, System.DateTime endDate, string titles, string skills, string sortColumns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandDetailsByMonth", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandDetailsByMonthResponse")]
        DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupByMonth[] ConsultingDemandDetailsByMonth(System.DateTime startDate, System.DateTime endDate, string titles, string skills, string salesStages, string sortColumns, bool isFromPipeLinePopUp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandGraphsByTitle", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandGraphsByTitleResponse")]
        System.Collections.Generic.Dictionary<string, int> ConsultingDemandGraphsByTitle(System.DateTime startDate, System.DateTime endDate, string Title, string salesStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandGraphsBySkills", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandGraphsBySkillsResponse")]
        System.Collections.Generic.Dictionary<string, int> ConsultingDemandGraphsBySkills(System.DateTime startDate, System.DateTime endDate, string Skill, string salesStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandTransactionReportByTitle", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandTransactionReportByTitleRespons" +
            "e")]
        DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbyTitle[] ConsultingDemandTransactionReportByTitle(System.DateTime startDate, System.DateTime endDate, string Title, string sortColumns, string salesStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandTransactionReportBySkill", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandTransactionReportBySkillRespons" +
            "e")]
        DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbySkill[] ConsultingDemandTransactionReportBySkill(System.DateTime startDate, System.DateTime endDate, string Skill, string sortColumns, string salesStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandGrphsGroupsByTitle", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandGrphsGroupsByTitleResponse")]
        System.Collections.Generic.Dictionary<string, int> ConsultingDemandGrphsGroupsByTitle(System.DateTime startDate, System.DateTime endDate, string salesStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ConsultingDemandGrphsGroupsBySkill", ReplyAction="http://tempuri.org/IReportService/ConsultingDemandGrphsGroupsBySkillResponse")]
        System.Collections.Generic.Dictionary<string, int> ConsultingDemandGrphsGroupsBySkill(System.DateTime startDate, System.DateTime endDate, string salesStages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/AttainmentBillableutlizationReport", ReplyAction="http://tempuri.org/IReportService/AttainmentBillableutlizationReportResponse")]
        DataTransferObjects.Reports.AttainmentBillableutlizationReport[] AttainmentBillableutlizationReport(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAttainmentProjectListMultiParameters", ReplyAction="http://tempuri.org/IReportService/GetAttainmentProjectListMultiParametersResponse" +
            "")]
        DataTransferObjects.Project[] GetAttainmentProjectListMultiParameters(
                    string clientIds, 
                    bool showProjected, 
                    bool showCompleted, 
                    bool showActive, 
                    bool showInternal, 
                    bool showExperimental, 
                    bool showProposed, 
                    bool showInactive, 
                    System.DateTime periodStart, 
                    System.DateTime periodEnd, 
                    string salespersonIdsList, 
                    string practiceManagerIdsList, 
                    string practiceIdsList, 
                    string projectGroupIdsList, 
                    DataTransferObjects.ProjectCalculateRangeType includeCurentYearFinancials, 
                    bool excludeInternalPractices, 
                    string userLogin, 
                    bool IsMonthsColoumnsShown, 
                    bool IsQuarterColoumnsShown, 
                    bool IsYearToDateColoumnsShown, 
                    bool getFinancialsFromCache);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ProjectAttributionReport", ReplyAction="http://tempuri.org/IReportService/ProjectAttributionReportResponse")]
        DataTransferObjects.Project[] ProjectAttributionReport(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ZeroHourlyRateExceptionReport", ReplyAction="http://tempuri.org/IReportService/ZeroHourlyRateExceptionReportResponse")]
        DataTransferObjects.Reports.ResourceExceptionReport[] ZeroHourlyRateExceptionReport(System.DateTime startDate, System.DateTime endDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceChannel : PraticeManagement.ReportService.IReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.ClientBase<PraticeManagement.ReportService.IReportService>, PraticeManagement.ReportService.IReportService {
       
        public ReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataTransferObjects.Reports.ResourceExceptionReport[] ResourceAssignedOrUnassignedChargingExceptionReport(System.DateTime startDate, System.DateTime endDate, bool isUnassignedReport) {
            return base.Channel.ResourceAssignedOrUnassignedChargingExceptionReport(startDate, endDate, isUnassignedReport);
        }
        
        public DataTransferObjects.Person[] RecruitingMetricsReport(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.RecruitingMetricsReport(startDate, endDate);
        }
        
        public DataTransferObjects.ProjectFeedback[] ProjectFeedbackReport(
                    string accountIds, 
                    string businessGroupIds, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    string projectStatus, 
                    string projectIds, 
                    string directorIds, 
                    string practiceIds, 
                    bool excludeInternalPractices, 
                    string personIds, 
                    string titleIds, 
                    string reviewStartdateMonths, 
                    string reviewEnddateMonths, 
                    string projectmanagerIds, 
                    string statusIds, 
                    bool isExport) {
            return base.Channel.ProjectFeedbackReport(accountIds, businessGroupIds, startDate, endDate, projectStatus, projectIds, directorIds, practiceIds, excludeInternalPractices, personIds, titleIds, reviewStartdateMonths, reviewEnddateMonths, projectmanagerIds, statusIds, isExport);
        }
        
        public DataTransferObjects.Reports.BillingReport[] BillingReportByCurrency(System.DateTime startDate, System.DateTime endDate, string practiceIds, string accountIds, string businessUnitIds, string directorIds, string salesPersonIds, string projectManagerIds, string seniorManagerIds) {
            return base.Channel.BillingReportByCurrency(startDate, endDate, practiceIds, accountIds, businessUnitIds, directorIds, salesPersonIds, projectManagerIds, seniorManagerIds);
        }
        
        public DataTransferObjects.Reports.BillingReport[] BillingReportByHours(System.DateTime startDate, System.DateTime endDate, string practiceIds, string accountIds, string businessUnitIds, string directorIds, string salesPersonIds, string projectManagerIds, string seniorManagerIds) {
            return base.Channel.BillingReportByHours(startDate, endDate, practiceIds, accountIds, businessUnitIds, directorIds, salesPersonIds, projectManagerIds, seniorManagerIds);
        }
        
        public DataTransferObjects.Reports.ProjectLevelGroupedHours[] NonBillableReport(System.DateTime startDate, System.DateTime endDate, string projectNumber, string directorIds, string businessUnitIds, string practiceIds) {
            return base.Channel.NonBillableReport(startDate, endDate, projectNumber, directorIds, businessUnitIds, practiceIds);
        }
        
        public DataTransferObjects.Reports.TimeEntriesGroupByClientAndProject[] PersonTimeEntriesDetails(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonTimeEntriesDetails(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Reports.TimeEntriesGroupByClientAndProject[] PersonTimeEntriesSummary(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.PersonTimeEntriesSummary(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Reports.PersonTimeEntriesTotals GetPersonTimeEntriesTotalsByPeriod(int personId, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetPersonTimeEntriesTotalsByPeriod(personId, startDate, endDate);
        }
        
        public DataTransferObjects.Reports.PersonLevelGroupedHours[] TimePeriodSummaryReportByResource(System.DateTime startDate, System.DateTime endDate, bool includePersonsWithNoTimeEntries, string personIds, string titleIds, string timescaleNames, string personStatusIds, string personDivisionIds) {
            return base.Channel.TimePeriodSummaryReportByResource(startDate, endDate, includePersonsWithNoTimeEntries, personIds, titleIds, timescaleNames, personStatusIds, personDivisionIds);
        }
        
        public DataTransferObjects.Reports.ProjectLevelGroupedHours[] TimePeriodSummaryReportByProject(System.DateTime startDate, System.DateTime endDate, string clientIds, string personStatusIds) {
            return base.Channel.TimePeriodSummaryReportByProject(startDate, endDate, clientIds, personStatusIds);
        }
        
        public DataTransferObjects.Reports.WorkTypeLevelGroupedHours[] TimePeriodSummaryReportByWorkType(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.TimePeriodSummaryReportByWorkType(startDate, endDate);
        }
        
        public DataTransferObjects.Reports.PersonLevelGroupedHours[] ProjectSummaryReportByResource(string projectNumber, System.Nullable<int> mileStoneId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string personRoleNames) {
            return base.Channel.ProjectSummaryReportByResource(projectNumber, mileStoneId, startDate, endDate, personRoleNames);
        }
        
        public DataTransferObjects.Reports.PersonLevelGroupedHours[] ProjectDetailReportByResource(string projectNumber, System.Nullable<int> mileStoneId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string personRoleNames) {
            return base.Channel.ProjectDetailReportByResource(projectNumber, mileStoneId, startDate, endDate, personRoleNames);
        }
        
        public DataTransferObjects.Reports.WorkTypeLevelGroupedHours[] ProjectSummaryReportByWorkType(string projectNumber, System.Nullable<int> mileStoneId, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, string categoryNames) {
            return base.Channel.ProjectSummaryReportByWorkType(projectNumber, mileStoneId, startDate, endDate, categoryNames);
        }
        
        public DataTransferObjects.Project[] GetProjectsByClientId(int clientId) {
            return base.Channel.GetProjectsByClientId(clientId);
        }
        
        public DataTransferObjects.Project[] ProjectSearchByName(string name) {
            return base.Channel.ProjectSearchByName(name);
        }
        
        public DataTransferObjects.Milestone[] GetMilestonesForProject(string projectNumber) {
            return base.Channel.GetMilestonesForProject(projectNumber);
        }
        
        public DataTransferObjects.Reports.PersonLevelPayCheck[] TimePeriodSummaryByResourcePayCheck(System.DateTime startDate, System.DateTime endDate, bool includePersonsWithNoTimeEntries, string personIds, string titleIds, string timescaleNames, string personStatusIds, string personDivisionIds) {
            return base.Channel.TimePeriodSummaryByResourcePayCheck(startDate, endDate, includePersonsWithNoTimeEntries, personIds, titleIds, timescaleNames, personStatusIds, personDivisionIds);
        }
        
        public DataTransferObjects.Reports.PersonLevelTimeEntriesHistory[] TimeEntryAuditReportByPerson(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.TimeEntryAuditReportByPerson(startDate, endDate);
        }
        
        public DataTransferObjects.Reports.ProjectLevelTimeEntriesHistory[] TimeEntryAuditReportByProject(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.TimeEntryAuditReportByProject(startDate, endDate);
        }
        
        public DataTransferObjects.Reports.ByAccount.GroupByAccount AccountSummaryReportByBusinessUnit(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.AccountSummaryReportByBusinessUnit(accountId, businessUnitIds, startDate, endDate);
        }
        
        public DataTransferObjects.Reports.ByAccount.GroupByAccount AccountSummaryReportByProject(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate, string projectStatusIds, string projectBillingTypes) {
            return base.Channel.AccountSummaryReportByProject(accountId, businessUnitIds, startDate, endDate, projectStatusIds, projectBillingTypes);
        }
        
        public DataTransferObjects.Reports.ByAccount.BusinessUnitLevelGroupedHours[] AccountReportGroupByBusinessUnit(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.AccountReportGroupByBusinessUnit(accountId, businessUnitIds, startDate, endDate);
        }
        
        public DataTransferObjects.Reports.ByAccount.GroupByPerson[] AccountReportGroupByPerson(int accountId, string businessUnitIds, System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.AccountReportGroupByPerson(accountId, businessUnitIds, startDate, endDate);
        }
        
        public DataTransferObjects.Person[] NewHireReport(System.DateTime startDate, System.DateTime endDate, string personStatusIds, string payTypeIds, string practiceIds, bool excludeInternalPractices, string personDivisionIds, string titleIds, string hireDates, string recruiterIds) {
            return base.Channel.NewHireReport(startDate, endDate, personStatusIds, payTypeIds, practiceIds, excludeInternalPractices, personDivisionIds, titleIds, hireDates, recruiterIds);
        }
        
        public DataTransferObjects.Reports.HumanCapital.TerminationPersonsInRange TerminationReport(System.DateTime startDate, System.DateTime endDate, string payTypeIds, string personStatusIds, string titleIds, string terminationReasonIds, string practiceIds, bool excludeInternalPractices, string personDivisionIds, string recruiterIds, string hireDates, string terminationDates) {
            return base.Channel.TerminationReport(startDate, endDate, payTypeIds, personStatusIds, titleIds, terminationReasonIds, practiceIds, excludeInternalPractices, personDivisionIds, recruiterIds, hireDates, terminationDates);
        }
        
        public DataTransferObjects.Reports.HumanCapital.TerminationPersonsInRange[] TerminationReportGraph(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.TerminationReportGraph(startDate, endDate);
        }
        
        public DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbyTitleSkill[] ConsultingDemandSummary(System.DateTime startDate, System.DateTime endDate, string titles, string skills) {
            return base.Channel.ConsultingDemandSummary(startDate, endDate, titles, skills);
        }
        
        public DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbyTitleSkill[] ConsultingDemandDetailsByTitleSkill(System.DateTime startDate, System.DateTime endDate, string titles, string skills, string sortColumns) {
            return base.Channel.ConsultingDemandDetailsByTitleSkill(startDate, endDate, titles, skills, sortColumns);
        }
        
        public DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupBySalesStage[] ConsultingDemandDetailsBySalesStage(System.DateTime startDate, System.DateTime endDate, string titles, string skills, string sortColumns) {
            return base.Channel.ConsultingDemandDetailsBySalesStage(startDate, endDate, titles, skills, sortColumns);
        }
        
        public DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupByMonth[] ConsultingDemandDetailsByMonth(System.DateTime startDate, System.DateTime endDate, string titles, string skills, string salesStages, string sortColumns, bool isFromPipeLinePopUp) {
            return base.Channel.ConsultingDemandDetailsByMonth(startDate, endDate, titles, skills, salesStages, sortColumns, isFromPipeLinePopUp);
        }
        
        public System.Collections.Generic.Dictionary<string, int> ConsultingDemandGraphsByTitle(System.DateTime startDate, System.DateTime endDate, string Title, string salesStages) {
            return base.Channel.ConsultingDemandGraphsByTitle(startDate, endDate, Title, salesStages);
        }
        
        public System.Collections.Generic.Dictionary<string, int> ConsultingDemandGraphsBySkills(System.DateTime startDate, System.DateTime endDate, string Skill, string salesStages) {
            return base.Channel.ConsultingDemandGraphsBySkills(startDate, endDate, Skill, salesStages);
        }
        
        public DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbyTitle[] ConsultingDemandTransactionReportByTitle(System.DateTime startDate, System.DateTime endDate, string Title, string sortColumns, string salesStages) {
            return base.Channel.ConsultingDemandTransactionReportByTitle(startDate, endDate, Title, sortColumns, salesStages);
        }
        
        public DataTransferObjects.Reports.ConsultingDemand.ConsultantGroupbySkill[] ConsultingDemandTransactionReportBySkill(System.DateTime startDate, System.DateTime endDate, string Skill, string sortColumns, string salesStages) {
            return base.Channel.ConsultingDemandTransactionReportBySkill(startDate, endDate, Skill, sortColumns, salesStages);
        }
        
        public System.Collections.Generic.Dictionary<string, int> ConsultingDemandGrphsGroupsByTitle(System.DateTime startDate, System.DateTime endDate, string salesStages) {
            return base.Channel.ConsultingDemandGrphsGroupsByTitle(startDate, endDate, salesStages);
        }
        
        public System.Collections.Generic.Dictionary<string, int> ConsultingDemandGrphsGroupsBySkill(System.DateTime startDate, System.DateTime endDate, string salesStages) {
            return base.Channel.ConsultingDemandGrphsGroupsBySkill(startDate, endDate, salesStages);
        }
        
        public DataTransferObjects.Reports.AttainmentBillableutlizationReport[] AttainmentBillableutlizationReport(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.AttainmentBillableutlizationReport(startDate, endDate);
        }
        
        public DataTransferObjects.Project[] GetAttainmentProjectListMultiParameters(
                    string clientIds, 
                    bool showProjected, 
                    bool showCompleted, 
                    bool showActive, 
                    bool showInternal, 
                    bool showExperimental, 
                    bool showProposed, 
                    bool showInactive, 
                    System.DateTime periodStart, 
                    System.DateTime periodEnd, 
                    string salespersonIdsList, 
                    string practiceManagerIdsList, 
                    string practiceIdsList, 
                    string projectGroupIdsList, 
                    DataTransferObjects.ProjectCalculateRangeType includeCurentYearFinancials, 
                    bool excludeInternalPractices, 
                    string userLogin, 
                    bool IsMonthsColoumnsShown, 
                    bool IsQuarterColoumnsShown, 
                    bool IsYearToDateColoumnsShown, 
                    bool getFinancialsFromCache) {
            return base.Channel.GetAttainmentProjectListMultiParameters(clientIds, showProjected, showCompleted, showActive, showInternal, showExperimental, showProposed, showInactive, periodStart, periodEnd, salespersonIdsList, practiceManagerIdsList, practiceIdsList, projectGroupIdsList, includeCurentYearFinancials, excludeInternalPractices, userLogin, IsMonthsColoumnsShown, IsQuarterColoumnsShown, IsYearToDateColoumnsShown, getFinancialsFromCache);
        }
        
        public DataTransferObjects.Project[] ProjectAttributionReport(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.ProjectAttributionReport(startDate, endDate);
        }
        
        public DataTransferObjects.Reports.ResourceExceptionReport[] ZeroHourlyRateExceptionReport(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.ZeroHourlyRateExceptionReport(startDate, endDate);
        }
    }
}

